/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "st060115_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

#include "ber.h"

namespace org { namespace misb {

int _kGenericFlagDataValues[] = {
  GenericFlagData::LASER_OFF,
  GenericFlagData::AUTO_TRACK_OFF,
  GenericFlagData::IR_POLARITY_WHITE_HOT,
  GenericFlagData::ICING_STATUS_NONE,
  GenericFlagData::SLANT_RANGE_CALCULATED,
  GenericFlagData::IMAGE_VALID
};
const char* _kGenericFlagDataNames[] = {
  "LASER_OFF",
  "AUTO_TRACK_OFF",
  "IR_POLARITY_WHITE_HOT",
  "ICING_STATUS_NONE",
  "SLANT_RANGE_CALCULATED",
  "IMAGE_VALID"
};
const std::map<int, const char*> _GenericFlagData_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kGenericFlagDataValues, _kGenericFlagDataNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GenericFlagData::type& val) {
  std::map<int, const char*>::const_iterator it = _GenericFlagData_VALUES_TO_NAMES.find(val);
  if (it != _GenericFlagData_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const GenericFlagData::type& val) {
  std::map<int, const char*>::const_iterator it = _GenericFlagData_VALUES_TO_NAMES.find(val);
  if (it != _GenericFlagData_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kSensorFieldOfViewNameValues[] = {
  SensorFieldOfViewName::ULTRANARROW,
  SensorFieldOfViewName::NARROW,
  SensorFieldOfViewName::MEDIUM,
  SensorFieldOfViewName::WIDE,
  SensorFieldOfViewName::ULTRAWIDE,
  SensorFieldOfViewName::NARROW_MEDIUM,
  SensorFieldOfViewName::ULTRANARROW_2X,
  SensorFieldOfViewName::ULTRANARROW_4X
};
const char* _kSensorFieldOfViewNameNames[] = {
  "ULTRANARROW",
  "NARROW",
  "MEDIUM",
  "WIDE",
  "ULTRAWIDE",
  "NARROW_MEDIUM",
  "ULTRANARROW_2X",
  "ULTRANARROW_4X"
};
const std::map<int, const char*> _SensorFieldOfViewName_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSensorFieldOfViewNameValues, _kSensorFieldOfViewNameNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SensorFieldOfViewName::type& val) {
  std::map<int, const char*>::const_iterator it = _SensorFieldOfViewName_VALUES_TO_NAMES.find(val);
  if (it != _SensorFieldOfViewName_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const SensorFieldOfViewName::type& val) {
  std::map<int, const char*>::const_iterator it = _SensorFieldOfViewName_VALUES_TO_NAMES.find(val);
  if (it != _SensorFieldOfViewName_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kOperationalModeValues[] = {
  OperationalMode::OTHER,
  OperationalMode::OPERATIONAL,
  OperationalMode::TRAINING,
  OperationalMode::EXERCISE,
  OperationalMode::MAINTENANCE,
  OperationalMode::TEST
};
const char* _kOperationalModeNames[] = {
  "OTHER",
  "OPERATIONAL",
  "TRAINING",
  "EXERCISE",
  "MAINTENANCE",
  "TEST"
};
const std::map<int, const char*> _OperationalMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kOperationalModeValues, _kOperationalModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const OperationalMode::type& val) {
  std::map<int, const char*>::const_iterator it = _OperationalMode_VALUES_TO_NAMES.find(val);
  if (it != _OperationalMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const OperationalMode::type& val) {
  std::map<int, const char*>::const_iterator it = _OperationalMode_VALUES_TO_NAMES.find(val);
  if (it != _OperationalMode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kPlatformStatusValues[] = {
  PlatformStatus::ACTIVE,
  PlatformStatus::PRE_FLIGHT,
  PlatformStatus::PRE_FLIGHT_TAXIING,
  PlatformStatus::RUN_UP,
  PlatformStatus::TAKE_OFF,
  PlatformStatus::INGRESS,
  PlatformStatus::MANUAL_OPERATION,
  PlatformStatus::AUTOMATED_ORBIT,
  PlatformStatus::TRANSITIONING,
  PlatformStatus::EGRESS,
  PlatformStatus::LANDING,
  PlatformStatus::LANDED_TAXIING,
  PlatformStatus::LANDED_PARKED
};
const char* _kPlatformStatusNames[] = {
  "ACTIVE",
  "PRE_FLIGHT",
  "PRE_FLIGHT_TAXIING",
  "RUN_UP",
  "TAKE_OFF",
  "INGRESS",
  "MANUAL_OPERATION",
  "AUTOMATED_ORBIT",
  "TRANSITIONING",
  "EGRESS",
  "LANDING",
  "LANDED_TAXIING",
  "LANDED_PARKED"
};
const std::map<int, const char*> _PlatformStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kPlatformStatusValues, _kPlatformStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PlatformStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _PlatformStatus_VALUES_TO_NAMES.find(val);
  if (it != _PlatformStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const PlatformStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _PlatformStatus_VALUES_TO_NAMES.find(val);
  if (it != _PlatformStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kSensorControlModeValues[] = {
  SensorControlMode::OFF,
  SensorControlMode::HOME_POSITION,
  SensorControlMode::UNCONTROLLED,
  SensorControlMode::MANUAL_CONTROL,
  SensorControlMode::CALIBRATING,
  SensorControlMode::AUTO_HOLDING_POSITION,
  SensorControlMode::AUTO_TRACKING
};
const char* _kSensorControlModeNames[] = {
  "OFF",
  "HOME_POSITION",
  "UNCONTROLLED",
  "MANUAL_CONTROL",
  "CALIBRATING",
  "AUTO_HOLDING_POSITION",
  "AUTO_TRACKING"
};
const std::map<int, const char*> _SensorControlMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSensorControlModeValues, _kSensorControlModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SensorControlMode::type& val) {
  std::map<int, const char*>::const_iterator it = _SensorControlMode_VALUES_TO_NAMES.find(val);
  if (it != _SensorControlMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const SensorControlMode::type& val) {
  std::map<int, const char*>::const_iterator it = _SensorControlMode_VALUES_TO_NAMES.find(val);
  if (it != _SensorControlMode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


SecurityLocalSet::~SecurityLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const SecurityLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SecurityLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SecurityLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SecurityLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SecurityLocalSet &a, SecurityLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SecurityLocalSet::SecurityLocalSet(const SecurityLocalSet& other0) {
  (void) other0;
}
SecurityLocalSet& SecurityLocalSet::operator=(const SecurityLocalSet& other1) {
  (void) other1;
  return *this;
}
void SecurityLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SecurityLocalSet(";
  out << ")";
}


RvtLocalSet::~RvtLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const RvtLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RvtLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RvtLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RvtLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RvtLocalSet &a, RvtLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

RvtLocalSet::RvtLocalSet(const RvtLocalSet& other2) {
  (void) other2;
}
RvtLocalSet& RvtLocalSet::operator=(const RvtLocalSet& other3) {
  (void) other3;
  return *this;
}
void RvtLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RvtLocalSet(";
  out << ")";
}


VmtiLocalSet::~VmtiLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const VmtiLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VmtiLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VmtiLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VmtiLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VmtiLocalSet &a, VmtiLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

VmtiLocalSet::VmtiLocalSet(const VmtiLocalSet& other4) {
  (void) other4;
}
VmtiLocalSet& VmtiLocalSet::operator=(const VmtiLocalSet& other5) {
  (void) other5;
  return *this;
}
void VmtiLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VmtiLocalSet(";
  out << ")";
}


ImageHorizontalPixelPack::~ImageHorizontalPixelPack() noexcept {
}

std::ostream& operator<<(std::ostream& out, const ImageHorizontalPixelPack& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ImageHorizontalPixelPack::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ImageHorizontalPixelPack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ImageHorizontalPixelPack");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ImageHorizontalPixelPack &a, ImageHorizontalPixelPack &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ImageHorizontalPixelPack::ImageHorizontalPixelPack(const ImageHorizontalPixelPack& other6) {
  (void) other6;
}
ImageHorizontalPixelPack& ImageHorizontalPixelPack::operator=(const ImageHorizontalPixelPack& other7) {
  (void) other7;
  return *this;
}
void ImageHorizontalPixelPack::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ImageHorizontalPixelPack(";
  out << ")";
}


SarMotionImageryLocalSet::~SarMotionImageryLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const SarMotionImageryLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SarMotionImageryLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SarMotionImageryLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SarMotionImageryLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SarMotionImageryLocalSet &a, SarMotionImageryLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SarMotionImageryLocalSet::SarMotionImageryLocalSet(const SarMotionImageryLocalSet& other8) {
  (void) other8;
}
SarMotionImageryLocalSet& SarMotionImageryLocalSet::operator=(const SarMotionImageryLocalSet& other9) {
  (void) other9;
  return *this;
}
void SarMotionImageryLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SarMotionImageryLocalSet(";
  out << ")";
}


RangeImageLocalSet::~RangeImageLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const RangeImageLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RangeImageLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RangeImageLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RangeImageLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RangeImageLocalSet &a, RangeImageLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

RangeImageLocalSet::RangeImageLocalSet(const RangeImageLocalSet& other10) {
  (void) other10;
}
RangeImageLocalSet& RangeImageLocalSet::operator=(const RangeImageLocalSet& other11) {
  (void) other11;
  return *this;
}
void RangeImageLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RangeImageLocalSet(";
  out << ")";
}


GeoRegistrationLocalSet::~GeoRegistrationLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const GeoRegistrationLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GeoRegistrationLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeoRegistrationLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GeoRegistrationLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GeoRegistrationLocalSet &a, GeoRegistrationLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

GeoRegistrationLocalSet::GeoRegistrationLocalSet(const GeoRegistrationLocalSet& other12) {
  (void) other12;
}
GeoRegistrationLocalSet& GeoRegistrationLocalSet::operator=(const GeoRegistrationLocalSet& other13) {
  (void) other13;
  return *this;
}
void GeoRegistrationLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GeoRegistrationLocalSet(";
  out << ")";
}


CompositeImagingLocalSet::~CompositeImagingLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const CompositeImagingLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CompositeImagingLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CompositeImagingLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompositeImagingLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompositeImagingLocalSet &a, CompositeImagingLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

CompositeImagingLocalSet::CompositeImagingLocalSet(const CompositeImagingLocalSet& other14) {
  (void) other14;
}
CompositeImagingLocalSet& CompositeImagingLocalSet::operator=(const CompositeImagingLocalSet& other15) {
  (void) other15;
  return *this;
}
void CompositeImagingLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompositeImagingLocalSet(";
  out << ")";
}


SegmentLocalSet::~SegmentLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const SegmentLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SegmentLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SegmentLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SegmentLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SegmentLocalSet &a, SegmentLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SegmentLocalSet::SegmentLocalSet(const SegmentLocalSet& other16) {
  (void) other16;
}
SegmentLocalSet& SegmentLocalSet::operator=(const SegmentLocalSet& other17) {
  (void) other17;
  return *this;
}
void SegmentLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SegmentLocalSet(";
  out << ")";
}


AmendLocalSet::~AmendLocalSet() noexcept {
}

std::ostream& operator<<(std::ostream& out, const AmendLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AmendLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AmendLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AmendLocalSet");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AmendLocalSet &a, AmendLocalSet &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AmendLocalSet::AmendLocalSet(const AmendLocalSet& other18) {
  (void) other18;
}
AmendLocalSet& AmendLocalSet::operator=(const AmendLocalSet& other19) {
  (void) other19;
  return *this;
}
void AmendLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AmendLocalSet(";
  out << ")";
}


SdccFlp::~SdccFlp() noexcept {
}

std::ostream& operator<<(std::ostream& out, const SdccFlp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SdccFlp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SdccFlp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SdccFlp");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SdccFlp &a, SdccFlp &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SdccFlp::SdccFlp(const SdccFlp& other20) {
  (void) other20;
}
SdccFlp& SdccFlp::operator=(const SdccFlp& other21) {
  (void) other21;
  return *this;
}
void SdccFlp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SdccFlp(";
  out << ")";
}


ControlCommand::~ControlCommand() noexcept {
}

std::ostream& operator<<(std::ostream& out, const ControlCommand& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ControlCommand::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ControlCommand::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ControlCommand");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ControlCommand &a, ControlCommand &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ControlCommand::ControlCommand(const ControlCommand& other22) {
  (void) other22;
}
ControlCommand& ControlCommand::operator=(const ControlCommand& other23) {
  (void) other23;
  return *this;
}
void ControlCommand::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ControlCommand(";
  out << ")";
}


ControlCommandVerificationList::~ControlCommandVerificationList() noexcept {
}

std::ostream& operator<<(std::ostream& out, const ControlCommandVerificationList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ControlCommandVerificationList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ControlCommandVerificationList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ControlCommandVerificationList");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ControlCommandVerificationList &a, ControlCommandVerificationList &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ControlCommandVerificationList::ControlCommandVerificationList(const ControlCommandVerificationList& other24) {
  (void) other24;
}
ControlCommandVerificationList& ControlCommandVerificationList::operator=(const ControlCommandVerificationList& other25) {
  (void) other25;
  return *this;
}
void ControlCommandVerificationList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ControlCommandVerificationList(";
  out << ")";
}


ActiveWavelengthList::~ActiveWavelengthList() noexcept {
}

std::ostream& operator<<(std::ostream& out, const ActiveWavelengthList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ActiveWavelengthList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActiveWavelengthList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ActiveWavelengthList");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActiveWavelengthList &a, ActiveWavelengthList &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ActiveWavelengthList::ActiveWavelengthList(const ActiveWavelengthList& other26) {
  (void) other26;
}
ActiveWavelengthList& ActiveWavelengthList::operator=(const ActiveWavelengthList& other27) {
  (void) other27;
  return *this;
}
void ActiveWavelengthList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ActiveWavelengthList(";
  out << ")";
}


CountryCodes::~CountryCodes() noexcept {
}

std::ostream& operator<<(std::ostream& out, const CountryCodes& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CountryCodes::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CountryCodes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CountryCodes");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CountryCodes &a, CountryCodes &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

CountryCodes::CountryCodes(const CountryCodes& other28) {
  (void) other28;
}
CountryCodes& CountryCodes::operator=(const CountryCodes& other29) {
  (void) other29;
  return *this;
}
void CountryCodes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CountryCodes(";
  out << ")";
}


SensorFrameRatePack::~SensorFrameRatePack() noexcept {
}

std::ostream& operator<<(std::ostream& out, const SensorFrameRatePack& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SensorFrameRatePack::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SensorFrameRatePack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SensorFrameRatePack");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SensorFrameRatePack &a, SensorFrameRatePack &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SensorFrameRatePack::SensorFrameRatePack(const SensorFrameRatePack& other30) {
  (void) other30;
}
SensorFrameRatePack& SensorFrameRatePack::operator=(const SensorFrameRatePack& other31) {
  (void) other31;
  return *this;
}
void SensorFrameRatePack::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SensorFrameRatePack(";
  out << ")";
}


WaveLengthList::~WaveLengthList() noexcept {
}

std::ostream& operator<<(std::ostream& out, const WaveLengthList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WaveLengthList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WaveLengthList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WaveLengthList");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WaveLengthList &a, WaveLengthList &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WaveLengthList::WaveLengthList(const WaveLengthList& other32) {
  (void) other32;
}
WaveLengthList& WaveLengthList::operator=(const WaveLengthList& other33) {
  (void) other33;
  return *this;
}
void WaveLengthList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WaveLengthList(";
  out << ")";
}


AirbaseLocations::~AirbaseLocations() noexcept {
}

std::ostream& operator<<(std::ostream& out, const AirbaseLocations& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AirbaseLocations::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AirbaseLocations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AirbaseLocations");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AirbaseLocations &a, AirbaseLocations &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AirbaseLocations::AirbaseLocations(const AirbaseLocations& other34) {
  (void) other34;
}
AirbaseLocations& AirbaseLocations::operator=(const AirbaseLocations& other35) {
  (void) other35;
  return *this;
}
void AirbaseLocations::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AirbaseLocations(";
  out << ")";
}


PayloadList::~PayloadList() noexcept {
}

std::ostream& operator<<(std::ostream& out, const PayloadList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PayloadList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PayloadList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PayloadList");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PayloadList &a, PayloadList &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

PayloadList::PayloadList(const PayloadList& other36) {
  (void) other36;
}
PayloadList& PayloadList::operator=(const PayloadList& other37) {
  (void) other37;
  return *this;
}
void PayloadList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PayloadList(";
  out << ")";
}


WeaponStores::~WeaponStores() noexcept {
}

std::ostream& operator<<(std::ostream& out, const WeaponStores& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WeaponStores::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WeaponStores::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WeaponStores");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WeaponStores &a, WeaponStores &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WeaponStores::WeaponStores(const WeaponStores& other38) {
  (void) other38;
}
WeaponStores& WeaponStores::operator=(const WeaponStores& other39) {
  (void) other39;
  return *this;
}
void WeaponStores::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WeaponStores(";
  out << ")";
}


WaypointList::~WaypointList() noexcept {
}

std::ostream& operator<<(std::ostream& out, const WaypointList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t WaypointList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WaypointList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WaypointList");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WaypointList &a, WaypointList &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WaypointList::WaypointList(const WaypointList& other40) {
  (void) other40;
}
WaypointList& WaypointList::operator=(const WaypointList& other41) {
  (void) other41;
  return *this;
}
void WaypointList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WaypointList(";
  out << ")";
}


UasDataLinkLocalSet::~UasDataLinkLocalSet() noexcept {
}


void UasDataLinkLocalSet::__set_checksum(const int16_t val) {
  this->checksum = val;
}

void UasDataLinkLocalSet::__set_precisionTimeStamp(const int64_t val) {
  this->precisionTimeStamp = val;
}

void UasDataLinkLocalSet::__set_missionId(const std::string& val) {
  this->missionId = val;
__isset.missionId = true;
}

void UasDataLinkLocalSet::__set_platformTailNumber(const std::string& val) {
  this->platformTailNumber = val;
__isset.platformTailNumber = true;
}

void UasDataLinkLocalSet::__set_platformHeadingAngle(const double val) {
  this->platformHeadingAngle = val;
__isset.platformHeadingAngle = true;
}

void UasDataLinkLocalSet::__set_platformPitchAngle(const double val) {
  this->platformPitchAngle = val;
__isset.platformPitchAngle = true;
}

void UasDataLinkLocalSet::__set_platformRollAngle(const double val) {
  this->platformRollAngle = val;
__isset.platformRollAngle = true;
}

void UasDataLinkLocalSet::__set_platformTrueAirspeed(const int8_t val) {
  this->platformTrueAirspeed = val;
__isset.platformTrueAirspeed = true;
}

void UasDataLinkLocalSet::__set_platformIndicatedAirspeed(const int8_t val) {
  this->platformIndicatedAirspeed = val;
__isset.platformIndicatedAirspeed = true;
}

void UasDataLinkLocalSet::__set_platformDesignation(const std::string& val) {
  this->platformDesignation = val;
__isset.platformDesignation = true;
}

void UasDataLinkLocalSet::__set_imageSensorSource(const std::string& val) {
  this->imageSensorSource = val;
__isset.imageSensorSource = true;
}

void UasDataLinkLocalSet::__set_imageCoordinateSystem(const std::string& val) {
  this->imageCoordinateSystem = val;
__isset.imageCoordinateSystem = true;
}

void UasDataLinkLocalSet::__set_sensorLattitude(const double val) {
  this->sensorLattitude = val;
__isset.sensorLattitude = true;
}

void UasDataLinkLocalSet::__set_sensorLongitude(const double val) {
  this->sensorLongitude = val;
__isset.sensorLongitude = true;
}

void UasDataLinkLocalSet::__set_sensorTrueAltitude(const double val) {
  this->sensorTrueAltitude = val;
__isset.sensorTrueAltitude = true;
}

void UasDataLinkLocalSet::__set_sensorHorizontalFieldOfView(const double val) {
  this->sensorHorizontalFieldOfView = val;
__isset.sensorHorizontalFieldOfView = true;
}

void UasDataLinkLocalSet::__set_sensorVerticalFieldOfView(const double val) {
  this->sensorVerticalFieldOfView = val;
__isset.sensorVerticalFieldOfView = true;
}

void UasDataLinkLocalSet::__set_sensorRelativeAzimuthAngle(const double val) {
  this->sensorRelativeAzimuthAngle = val;
__isset.sensorRelativeAzimuthAngle = true;
}

void UasDataLinkLocalSet::__set_sensorRelativeElevationAngle(const double val) {
  this->sensorRelativeElevationAngle = val;
__isset.sensorRelativeElevationAngle = true;
}

void UasDataLinkLocalSet::__set_sensorRelativeRollAngle(const double val) {
  this->sensorRelativeRollAngle = val;
__isset.sensorRelativeRollAngle = true;
}

void UasDataLinkLocalSet::__set_slantRange(const double val) {
  this->slantRange = val;
__isset.slantRange = true;
}

void UasDataLinkLocalSet::__set_targetWidth(const double val) {
  this->targetWidth = val;
__isset.targetWidth = true;
}

void UasDataLinkLocalSet::__set_frameCenterLatitude(const double val) {
  this->frameCenterLatitude = val;
__isset.frameCenterLatitude = true;
}

void UasDataLinkLocalSet::__set_frameCenterLongitude(const double val) {
  this->frameCenterLongitude = val;
__isset.frameCenterLongitude = true;
}

void UasDataLinkLocalSet::__set_frameCenterElevation(const double val) {
  this->frameCenterElevation = val;
__isset.frameCenterElevation = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLatitudePoint1(const double val) {
  this->offsetCornerLatitudePoint1 = val;
__isset.offsetCornerLatitudePoint1 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLongitudePoint1(const double val) {
  this->offsetCornerLongitudePoint1 = val;
__isset.offsetCornerLongitudePoint1 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLatitudePoint2(const double val) {
  this->offsetCornerLatitudePoint2 = val;
__isset.offsetCornerLatitudePoint2 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLongitudePoint2(const double val) {
  this->offsetCornerLongitudePoint2 = val;
__isset.offsetCornerLongitudePoint2 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLatitudePoint3(const double val) {
  this->offsetCornerLatitudePoint3 = val;
__isset.offsetCornerLatitudePoint3 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLongitudePoint3(const double val) {
  this->offsetCornerLongitudePoint3 = val;
__isset.offsetCornerLongitudePoint3 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLatitudePoint4(const double val) {
  this->offsetCornerLatitudePoint4 = val;
__isset.offsetCornerLatitudePoint4 = true;
}

void UasDataLinkLocalSet::__set_offsetCornerLongitudePoint4(const double val) {
  this->offsetCornerLongitudePoint4 = val;
__isset.offsetCornerLongitudePoint4 = true;
}

void UasDataLinkLocalSet::__set_icingDetected(const bool val) {
  this->icingDetected = val;
__isset.icingDetected = true;
}

void UasDataLinkLocalSet::__set_windDirection(const double val) {
  this->windDirection = val;
__isset.windDirection = true;
}

void UasDataLinkLocalSet::__set_windSpeed(const double val) {
  this->windSpeed = val;
__isset.windSpeed = true;
}

void UasDataLinkLocalSet::__set_staticPressure(const double val) {
  this->staticPressure = val;
__isset.staticPressure = true;
}

void UasDataLinkLocalSet::__set_densityAltitude(const int16_t val) {
  this->densityAltitude = val;
__isset.densityAltitude = true;
}

void UasDataLinkLocalSet::__set_outsideAirTemperature(const int8_t val) {
  this->outsideAirTemperature = val;
__isset.outsideAirTemperature = true;
}

void UasDataLinkLocalSet::__set_targetLocationLatitude(const double val) {
  this->targetLocationLatitude = val;
__isset.targetLocationLatitude = true;
}

void UasDataLinkLocalSet::__set_targetLocationLongitude(const double val) {
  this->targetLocationLongitude = val;
__isset.targetLocationLongitude = true;
}

void UasDataLinkLocalSet::__set_targetLocationElevation(const double val) {
  this->targetLocationElevation = val;
__isset.targetLocationElevation = true;
}

void UasDataLinkLocalSet::__set_targetTrackGateWidth(const int16_t val) {
  this->targetTrackGateWidth = val;
__isset.targetTrackGateWidth = true;
}

void UasDataLinkLocalSet::__set_targetTrackGateHeight(const int16_t val) {
  this->targetTrackGateHeight = val;
__isset.targetTrackGateHeight = true;
}

void UasDataLinkLocalSet::__set_targetErrorEstimateCe90(const double val) {
  this->targetErrorEstimateCe90 = val;
__isset.targetErrorEstimateCe90 = true;
}

void UasDataLinkLocalSet::__set_targetErrorEstimateLe90(const double val) {
  this->targetErrorEstimateLe90 = val;
__isset.targetErrorEstimateLe90 = true;
}

void UasDataLinkLocalSet::__set_genericFlagData(const GenericFlagData::type val) {
  this->genericFlagData = val;
__isset.genericFlagData = true;
}

void UasDataLinkLocalSet::__set_securityLocalSet(const SecurityLocalSet& val) {
  this->securityLocalSet = val;
__isset.securityLocalSet = true;
}

void UasDataLinkLocalSet::__set_differentialPressure(const double val) {
  this->differentialPressure = val;
__isset.differentialPressure = true;
}

void UasDataLinkLocalSet::__set_platformAngleOfAttack(const double val) {
  this->platformAngleOfAttack = val;
__isset.platformAngleOfAttack = true;
}

void UasDataLinkLocalSet::__set_platformVerticalSpeed(const double val) {
  this->platformVerticalSpeed = val;
__isset.platformVerticalSpeed = true;
}

void UasDataLinkLocalSet::__set_platformSideslipAngle(const double val) {
  this->platformSideslipAngle = val;
__isset.platformSideslipAngle = true;
}

void UasDataLinkLocalSet::__set_airfieldBarometricPressure(const double val) {
  this->airfieldBarometricPressure = val;
__isset.airfieldBarometricPressure = true;
}

void UasDataLinkLocalSet::__set_airfieldElevation(const double val) {
  this->airfieldElevation = val;
__isset.airfieldElevation = true;
}

void UasDataLinkLocalSet::__set_relativeHumidity(const double val) {
  this->relativeHumidity = val;
__isset.relativeHumidity = true;
}

void UasDataLinkLocalSet::__set_platformGroundSpeed(const int8_t val) {
  this->platformGroundSpeed = val;
__isset.platformGroundSpeed = true;
}

void UasDataLinkLocalSet::__set_groundRange(const double val) {
  this->groundRange = val;
__isset.groundRange = true;
}

void UasDataLinkLocalSet::__set_platformFuelRemaining(const int16_t val) {
  this->platformFuelRemaining = val;
__isset.platformFuelRemaining = true;
}

void UasDataLinkLocalSet::__set_platformCallSign(const std::string& val) {
  this->platformCallSign = val;
__isset.platformCallSign = true;
}

void UasDataLinkLocalSet::__set_weaponLoad(const int16_t val) {
  this->weaponLoad = val;
__isset.weaponLoad = true;
}

void UasDataLinkLocalSet::__set_weaponFired(const int8_t val) {
  this->weaponFired = val;
__isset.weaponFired = true;
}

void UasDataLinkLocalSet::__set_laserPrfCode(const int16_t val) {
  this->laserPrfCode = val;
__isset.laserPrfCode = true;
}

void UasDataLinkLocalSet::__set_sensorFieldOfViewName(const SensorFieldOfViewName::type val) {
  this->sensorFieldOfViewName = val;
__isset.sensorFieldOfViewName = true;
}

void UasDataLinkLocalSet::__set_platformMagneticHeading(const double val) {
  this->platformMagneticHeading = val;
__isset.platformMagneticHeading = true;
}

void UasDataLinkLocalSet::__set_uasDatalinkLsVersionNumber(const int8_t val) {
  this->uasDatalinkLsVersionNumber = val;
}

void UasDataLinkLocalSet::__set_invalid(const int8_t val) {
  this->invalid = val;
__isset.invalid = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformLatitude(const double val) {
  this->alternatePlatformLatitude = val;
__isset.alternatePlatformLatitude = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformLongitude(const double val) {
  this->alternatePlatformLongitude = val;
__isset.alternatePlatformLongitude = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformAltitude(const double val) {
  this->alternatePlatformAltitude = val;
__isset.alternatePlatformAltitude = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformName(const std::string& val) {
  this->alternatePlatformName = val;
__isset.alternatePlatformName = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformHeading(const double val) {
  this->alternatePlatformHeading = val;
__isset.alternatePlatformHeading = true;
}

void UasDataLinkLocalSet::__set_eventStartTimeUtc(const int64_t val) {
  this->eventStartTimeUtc = val;
__isset.eventStartTimeUtc = true;
}

void UasDataLinkLocalSet::__set_rvtLocalSet(const RvtLocalSet& val) {
  this->rvtLocalSet = val;
__isset.rvtLocalSet = true;
}

void UasDataLinkLocalSet::__set_vmtiLocalSet(const VmtiLocalSet& val) {
  this->vmtiLocalSet = val;
__isset.vmtiLocalSet = true;
}

void UasDataLinkLocalSet::__set_sensorEllipsoidHeight(const double val) {
  this->sensorEllipsoidHeight = val;
__isset.sensorEllipsoidHeight = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformEllipsoidHeight(const double val) {
  this->alternatePlatformEllipsoidHeight = val;
__isset.alternatePlatformEllipsoidHeight = true;
}

void UasDataLinkLocalSet::__set_operationalMode(const OperationalMode::type val) {
  this->operationalMode = val;
__isset.operationalMode = true;
}

void UasDataLinkLocalSet::__set_frameCenterHeightAboveEllipsoid(const double val) {
  this->frameCenterHeightAboveEllipsoid = val;
__isset.frameCenterHeightAboveEllipsoid = true;
}

void UasDataLinkLocalSet::__set_sensorNorthVelocity(const double val) {
  this->sensorNorthVelocity = val;
__isset.sensorNorthVelocity = true;
}

void UasDataLinkLocalSet::__set_sensorEastVelocity(const double val) {
  this->sensorEastVelocity = val;
__isset.sensorEastVelocity = true;
}

void UasDataLinkLocalSet::__set_imageHorizonPixelPack(const ImageHorizontalPixelPack& val) {
  this->imageHorizonPixelPack = val;
__isset.imageHorizonPixelPack = true;
}

void UasDataLinkLocalSet::__set_cornerLatitudePoint1_Full(const double val) {
  this->cornerLatitudePoint1_Full = val;
__isset.cornerLatitudePoint1_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLongitudePoint1_Full(const double val) {
  this->cornerLongitudePoint1_Full = val;
__isset.cornerLongitudePoint1_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLatitudePoint2_Full(const double val) {
  this->cornerLatitudePoint2_Full = val;
__isset.cornerLatitudePoint2_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLongitudePoint2_Full(const double val) {
  this->cornerLongitudePoint2_Full = val;
__isset.cornerLongitudePoint2_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLatitudePoint3_Full(const double val) {
  this->cornerLatitudePoint3_Full = val;
__isset.cornerLatitudePoint3_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLongitudePoint3_Full(const double val) {
  this->cornerLongitudePoint3_Full = val;
__isset.cornerLongitudePoint3_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLatitudePoint4_Full(const double val) {
  this->cornerLatitudePoint4_Full = val;
__isset.cornerLatitudePoint4_Full = true;
}

void UasDataLinkLocalSet::__set_cornerLongitudePoint4_Full(const double val) {
  this->cornerLongitudePoint4_Full = val;
__isset.cornerLongitudePoint4_Full = true;
}

void UasDataLinkLocalSet::__set_platformPitchAngleFull(const double val) {
  this->platformPitchAngleFull = val;
__isset.platformPitchAngleFull = true;
}

void UasDataLinkLocalSet::__set_platformRollAngleFull(const double val) {
  this->platformRollAngleFull = val;
__isset.platformRollAngleFull = true;
}

void UasDataLinkLocalSet::__set_platformAngleOfAttackFull(const double val) {
  this->platformAngleOfAttackFull = val;
__isset.platformAngleOfAttackFull = true;
}

void UasDataLinkLocalSet::__set_platformSideslipAngleFull(const double val) {
  this->platformSideslipAngleFull = val;
__isset.platformSideslipAngleFull = true;
}

void UasDataLinkLocalSet::__set_miisCoreIdentifier(const std::string& val) {
  this->miisCoreIdentifier = val;
__isset.miisCoreIdentifier = true;
}

void UasDataLinkLocalSet::__set_sarMotionImageryLocalSet(const SarMotionImageryLocalSet& val) {
  this->sarMotionImageryLocalSet = val;
__isset.sarMotionImageryLocalSet = true;
}

void UasDataLinkLocalSet::__set_targetWidthExtended(const double val) {
  this->targetWidthExtended = val;
__isset.targetWidthExtended = true;
}

void UasDataLinkLocalSet::__set_rangeImageLocalSet(const RangeImageLocalSet& val) {
  this->rangeImageLocalSet = val;
__isset.rangeImageLocalSet = true;
}

void UasDataLinkLocalSet::__set_geoRegistrationLocalSet(const GeoRegistrationLocalSet& val) {
  this->geoRegistrationLocalSet = val;
__isset.geoRegistrationLocalSet = true;
}

void UasDataLinkLocalSet::__set_compositeImagingLocalSet(const CompositeImagingLocalSet& val) {
  this->compositeImagingLocalSet = val;
__isset.compositeImagingLocalSet = true;
}

void UasDataLinkLocalSet::__set_segmentLocalSet(const SegmentLocalSet& val) {
  this->segmentLocalSet = val;
__isset.segmentLocalSet = true;
}

void UasDataLinkLocalSet::__set_amendLocalSet(const AmendLocalSet& val) {
  this->amendLocalSet = val;
__isset.amendLocalSet = true;
}

void UasDataLinkLocalSet::__set_sdccFlp(const SdccFlp& val) {
  this->sdccFlp = val;
__isset.sdccFlp = true;
}

void UasDataLinkLocalSet::__set_densityAltitudeExtended(const double val) {
  this->densityAltitudeExtended = val;
__isset.densityAltitudeExtended = true;
}

void UasDataLinkLocalSet::__set_sensorEllipsoidHeightExtended(const double val) {
  this->sensorEllipsoidHeightExtended = val;
__isset.sensorEllipsoidHeightExtended = true;
}

void UasDataLinkLocalSet::__set_alternatePlatformEllipsoidHeightExtended(const double val) {
  this->alternatePlatformEllipsoidHeightExtended = val;
__isset.alternatePlatformEllipsoidHeightExtended = true;
}

void UasDataLinkLocalSet::__set_streamDesignator(const std::string& val) {
  this->streamDesignator = val;
__isset.streamDesignator = true;
}

void UasDataLinkLocalSet::__set_operationalBase(const std::string& val) {
  this->operationalBase = val;
__isset.operationalBase = true;
}

void UasDataLinkLocalSet::__set_broadcastSource(const std::string& val) {
  this->broadcastSource = val;
__isset.broadcastSource = true;
}

void UasDataLinkLocalSet::__set_rangeToRecoveryLocation(const double val) {
  this->rangeToRecoveryLocation = val;
__isset.rangeToRecoveryLocation = true;
}

void UasDataLinkLocalSet::__set_timeAirborne(const int32_t val) {
  this->timeAirborne = val;
__isset.timeAirborne = true;
}

void UasDataLinkLocalSet::__set_propulsionUnitSpeed(const int32_t val) {
  this->propulsionUnitSpeed = val;
__isset.propulsionUnitSpeed = true;
}

void UasDataLinkLocalSet::__set_platformCourseAngle(const double val) {
  this->platformCourseAngle = val;
__isset.platformCourseAngle = true;
}

void UasDataLinkLocalSet::__set_altitudeAgl(const double val) {
  this->altitudeAgl = val;
__isset.altitudeAgl = true;
}

void UasDataLinkLocalSet::__set_radarAltimeter(const double val) {
  this->radarAltimeter = val;
__isset.radarAltimeter = true;
}

void UasDataLinkLocalSet::__set_controlCommand(const ControlCommand& val) {
  this->controlCommand = val;
__isset.controlCommand = true;
}

void UasDataLinkLocalSet::__set_controlCommandVerificationList(const ControlCommandVerificationList& val) {
  this->controlCommandVerificationList = val;
__isset.controlCommandVerificationList = true;
}

void UasDataLinkLocalSet::__set_sensorAzimuthRate(const double val) {
  this->sensorAzimuthRate = val;
__isset.sensorAzimuthRate = true;
}

void UasDataLinkLocalSet::__set_sensorElevationRate(const double val) {
  this->sensorElevationRate = val;
__isset.sensorElevationRate = true;
}

void UasDataLinkLocalSet::__set_sensorRollRate(const double val) {
  this->sensorRollRate = val;
__isset.sensorRollRate = true;
}

void UasDataLinkLocalSet::__set_onBoardMiStoragePercentFull(const double val) {
  this->onBoardMiStoragePercentFull = val;
__isset.onBoardMiStoragePercentFull = true;
}

void UasDataLinkLocalSet::__set_activeWavelengthList(const ActiveWavelengthList& val) {
  this->activeWavelengthList = val;
__isset.activeWavelengthList = true;
}

void UasDataLinkLocalSet::__set_countryCodes(const CountryCodes& val) {
  this->countryCodes = val;
__isset.countryCodes = true;
}

void UasDataLinkLocalSet::__set_numberOfNavsatsInView(const int8_t val) {
  this->numberOfNavsatsInView = val;
__isset.numberOfNavsatsInView = true;
}

void UasDataLinkLocalSet::__set_positioningMethodSource(const int8_t val) {
  this->positioningMethodSource = val;
__isset.positioningMethodSource = true;
}

void UasDataLinkLocalSet::__set_platformStatus(const PlatformStatus::type val) {
  this->platformStatus = val;
__isset.platformStatus = true;
}

void UasDataLinkLocalSet::__set_sensorControlMode(const SensorControlMode::type val) {
  this->sensorControlMode = val;
__isset.sensorControlMode = true;
}

void UasDataLinkLocalSet::__set_sensorFrameRatePack(const SensorFrameRatePack& val) {
  this->sensorFrameRatePack = val;
__isset.sensorFrameRatePack = true;
}

void UasDataLinkLocalSet::__set_wavelengthsList(const WaveLengthList& val) {
  this->wavelengthsList = val;
__isset.wavelengthsList = true;
}

void UasDataLinkLocalSet::__set_targetId(const std::string& val) {
  this->targetId = val;
__isset.targetId = true;
}

void UasDataLinkLocalSet::__set_airbaseLocations(const AirbaseLocations& val) {
  this->airbaseLocations = val;
__isset.airbaseLocations = true;
}

void UasDataLinkLocalSet::__set_takeOffTime(const int64_t val) {
  this->takeOffTime = val;
__isset.takeOffTime = true;
}

void UasDataLinkLocalSet::__set_transmissionFrequency(const double val) {
  this->transmissionFrequency = val;
__isset.transmissionFrequency = true;
}

void UasDataLinkLocalSet::__set_onBoardMiStorageCapacity(const int32_t val) {
  this->onBoardMiStorageCapacity = val;
__isset.onBoardMiStorageCapacity = true;
}

void UasDataLinkLocalSet::__set_zoomPercentage(const double val) {
  this->zoomPercentage = val;
__isset.zoomPercentage = true;
}

void UasDataLinkLocalSet::__set_communicationsMethod(const std::string& val) {
  this->communicationsMethod = val;
__isset.communicationsMethod = true;
}

void UasDataLinkLocalSet::__set_leapSeconds(const int32_t val) {
  this->leapSeconds = val;
__isset.leapSeconds = true;
}

void UasDataLinkLocalSet::__set_correctionOffset(const int64_t val) {
  this->correctionOffset = val;
__isset.correctionOffset = true;
}

void UasDataLinkLocalSet::__set_payloadList(const PayloadList& val) {
  this->payloadList = val;
__isset.payloadList = true;
}

void UasDataLinkLocalSet::__set_activePayloads(const std::string& val) {
  this->activePayloads = val;
__isset.activePayloads = true;
}

void UasDataLinkLocalSet::__set_weaponStores(const WeaponStores& val) {
  this->weaponStores = val;
__isset.weaponStores = true;
}

void UasDataLinkLocalSet::__set_waypointList(const WaypointList& val) {
  this->waypointList = val;
__isset.waypointList = true;
}
std::ostream& operator<<(std::ostream& out, const UasDataLinkLocalSet& obj)
{
  obj.printTo(out);
  return out;
}


static size_t readBer(::apache::thrift::protocol::TProtocol* iprot, uintmax_t & r) {
	size_t nbytes;
	int8_t byte;
	uint8_t ber[ BER_MAX_BYTES ];

	using ::apache::thrift::protocol::TProtocolException;

	iprot->readByte(byte);
	ber[ 0 ] = byte;

	if ( ber[0] & BER_LONG_FORM_MASK ) {
		nbytes = ber[0] & (~BER_LONG_FORM_MASK);
		if ( nbytes > sizeof( ber ) ) {
		    throw TProtocolException(TProtocolException::INVALID_DATA);
		}
	} else {
		nbytes = 1;
	}
	for( size_t i = 1; i < nbytes; ++i ) {
		iprot->readByte(byte);
		ber[i] = byte;
	}
	if ( -1 == ::berUintDecode( ber, sizeof(ber), & r ) ) {
		throw TProtocolException(TProtocolException::INVALID_DATA);
	}

	return nbytes;
}

uint32_t UasDataLinkLocalSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;
  uintmax_t ber;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_checksum = false;
  bool isset_precisionTimeStamp = false;
  bool isset_uasDatalinkLsVersionNumber = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += readBer( iprot, ber );
          xfer += iprot->readI16(this->checksum);
          isset_checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
		  xfer += readBer( iprot, ber );
          xfer += iprot->readI64(this->precisionTimeStamp);
          isset_precisionTimeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platformTailNumber);
          this->__isset.platformTailNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformHeadingAngle);
          this->__isset.platformHeadingAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformPitchAngle);
          this->__isset.platformPitchAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformRollAngle);
          this->__isset.platformRollAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->platformTrueAirspeed);
          this->__isset.platformTrueAirspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->platformIndicatedAirspeed);
          this->__isset.platformIndicatedAirspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platformDesignation);
          this->__isset.platformDesignation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageSensorSource);
          this->__isset.imageSensorSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageCoordinateSystem);
          this->__isset.imageCoordinateSystem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorLattitude);
          this->__isset.sensorLattitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorLongitude);
          this->__isset.sensorLongitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorTrueAltitude);
          this->__isset.sensorTrueAltitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorHorizontalFieldOfView);
          this->__isset.sensorHorizontalFieldOfView = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorVerticalFieldOfView);
          this->__isset.sensorVerticalFieldOfView = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorRelativeAzimuthAngle);
          this->__isset.sensorRelativeAzimuthAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorRelativeElevationAngle);
          this->__isset.sensorRelativeElevationAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorRelativeRollAngle);
          this->__isset.sensorRelativeRollAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->slantRange);
          this->__isset.slantRange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetWidth);
          this->__isset.targetWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->frameCenterLatitude);
          this->__isset.frameCenterLatitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->frameCenterLongitude);
          this->__isset.frameCenterLongitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->frameCenterElevation);
          this->__isset.frameCenterElevation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLatitudePoint1);
          this->__isset.offsetCornerLatitudePoint1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLongitudePoint1);
          this->__isset.offsetCornerLongitudePoint1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLatitudePoint2);
          this->__isset.offsetCornerLatitudePoint2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLongitudePoint2);
          this->__isset.offsetCornerLongitudePoint2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLatitudePoint3);
          this->__isset.offsetCornerLatitudePoint3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLongitudePoint3);
          this->__isset.offsetCornerLongitudePoint3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLatitudePoint4);
          this->__isset.offsetCornerLatitudePoint4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->offsetCornerLongitudePoint4);
          this->__isset.offsetCornerLongitudePoint4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->icingDetected);
          this->__isset.icingDetected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->windDirection);
          this->__isset.windDirection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->windSpeed);
          this->__isset.windSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->staticPressure);
          this->__isset.staticPressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->densityAltitude);
          this->__isset.densityAltitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->outsideAirTemperature);
          this->__isset.outsideAirTemperature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetLocationLatitude);
          this->__isset.targetLocationLatitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetLocationLongitude);
          this->__isset.targetLocationLongitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetLocationElevation);
          this->__isset.targetLocationElevation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->targetTrackGateWidth);
          this->__isset.targetTrackGateWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->targetTrackGateHeight);
          this->__isset.targetTrackGateHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetErrorEstimateCe90);
          this->__isset.targetErrorEstimateCe90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetErrorEstimateLe90);
          this->__isset.targetErrorEstimateLe90 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast42;
          xfer += iprot->readI32(ecast42);
          this->genericFlagData = (GenericFlagData::type)ecast42;
          this->__isset.genericFlagData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->securityLocalSet.read(iprot);
          this->__isset.securityLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->differentialPressure);
          this->__isset.differentialPressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformAngleOfAttack);
          this->__isset.platformAngleOfAttack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformVerticalSpeed);
          this->__isset.platformVerticalSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformSideslipAngle);
          this->__isset.platformSideslipAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->airfieldBarometricPressure);
          this->__isset.airfieldBarometricPressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->airfieldElevation);
          this->__isset.airfieldElevation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relativeHumidity);
          this->__isset.relativeHumidity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->platformGroundSpeed);
          this->__isset.platformGroundSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->groundRange);
          this->__isset.groundRange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->platformFuelRemaining);
          this->__isset.platformFuelRemaining = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->platformCallSign);
          this->__isset.platformCallSign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->weaponLoad);
          this->__isset.weaponLoad = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->weaponFired);
          this->__isset.weaponFired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->laserPrfCode);
          this->__isset.laserPrfCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast43;
          xfer += iprot->readI32(ecast43);
          this->sensorFieldOfViewName = (SensorFieldOfViewName::type)ecast43;
          this->__isset.sensorFieldOfViewName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformMagneticHeading);
          this->__isset.platformMagneticHeading = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += readBer( iprot, ber );
          xfer += iprot->readByte(this->uasDatalinkLsVersionNumber);
          isset_uasDatalinkLsVersionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->invalid);
          this->__isset.invalid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alternatePlatformLatitude);
          this->__isset.alternatePlatformLatitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alternatePlatformLongitude);
          this->__isset.alternatePlatformLongitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alternatePlatformAltitude);
          this->__isset.alternatePlatformAltitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->alternatePlatformName);
          this->__isset.alternatePlatformName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alternatePlatformHeading);
          this->__isset.alternatePlatformHeading = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventStartTimeUtc);
          this->__isset.eventStartTimeUtc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rvtLocalSet.read(iprot);
          this->__isset.rvtLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vmtiLocalSet.read(iprot);
          this->__isset.vmtiLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorEllipsoidHeight);
          this->__isset.sensorEllipsoidHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alternatePlatformEllipsoidHeight);
          this->__isset.alternatePlatformEllipsoidHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast44;
          xfer += iprot->readI32(ecast44);
          this->operationalMode = (OperationalMode::type)ecast44;
          this->__isset.operationalMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->frameCenterHeightAboveEllipsoid);
          this->__isset.frameCenterHeightAboveEllipsoid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 79:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorNorthVelocity);
          this->__isset.sensorNorthVelocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorEastVelocity);
          this->__isset.sensorEastVelocity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->imageHorizonPixelPack.read(iprot);
          this->__isset.imageHorizonPixelPack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLatitudePoint1_Full);
          this->__isset.cornerLatitudePoint1_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLongitudePoint1_Full);
          this->__isset.cornerLongitudePoint1_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLatitudePoint2_Full);
          this->__isset.cornerLatitudePoint2_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLongitudePoint2_Full);
          this->__isset.cornerLongitudePoint2_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLatitudePoint3_Full);
          this->__isset.cornerLatitudePoint3_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLongitudePoint3_Full);
          this->__isset.cornerLongitudePoint3_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLatitudePoint4_Full);
          this->__isset.cornerLatitudePoint4_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cornerLongitudePoint4_Full);
          this->__isset.cornerLongitudePoint4_Full = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformPitchAngleFull);
          this->__isset.platformPitchAngleFull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformRollAngleFull);
          this->__isset.platformRollAngleFull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformAngleOfAttackFull);
          this->__isset.platformAngleOfAttackFull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformSideslipAngleFull);
          this->__isset.platformSideslipAngleFull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->miisCoreIdentifier);
          this->__isset.miisCoreIdentifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sarMotionImageryLocalSet.read(iprot);
          this->__isset.sarMotionImageryLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->targetWidthExtended);
          this->__isset.targetWidthExtended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rangeImageLocalSet.read(iprot);
          this->__isset.rangeImageLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geoRegistrationLocalSet.read(iprot);
          this->__isset.geoRegistrationLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->compositeImagingLocalSet.read(iprot);
          this->__isset.compositeImagingLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->segmentLocalSet.read(iprot);
          this->__isset.segmentLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->amendLocalSet.read(iprot);
          this->__isset.amendLocalSet = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sdccFlp.read(iprot);
          this->__isset.sdccFlp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->densityAltitudeExtended);
          this->__isset.densityAltitudeExtended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorEllipsoidHeightExtended);
          this->__isset.sensorEllipsoidHeightExtended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->alternatePlatformEllipsoidHeightExtended);
          this->__isset.alternatePlatformEllipsoidHeightExtended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 106:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->streamDesignator);
          this->__isset.streamDesignator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 107:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operationalBase);
          this->__isset.operationalBase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 108:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->broadcastSource);
          this->__isset.broadcastSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 109:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rangeToRecoveryLocation);
          this->__isset.rangeToRecoveryLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeAirborne);
          this->__isset.timeAirborne = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 111:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->propulsionUnitSpeed);
          this->__isset.propulsionUnitSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 112:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->platformCourseAngle);
          this->__isset.platformCourseAngle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 113:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitudeAgl);
          this->__isset.altitudeAgl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 114:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->radarAltimeter);
          this->__isset.radarAltimeter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 115:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->controlCommand.read(iprot);
          this->__isset.controlCommand = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 116:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->controlCommandVerificationList.read(iprot);
          this->__isset.controlCommandVerificationList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 117:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorAzimuthRate);
          this->__isset.sensorAzimuthRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 118:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorElevationRate);
          this->__isset.sensorElevationRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 119:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sensorRollRate);
          this->__isset.sensorRollRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->onBoardMiStoragePercentFull);
          this->__isset.onBoardMiStoragePercentFull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->activeWavelengthList.read(iprot);
          this->__isset.activeWavelengthList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 122:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->countryCodes.read(iprot);
          this->__isset.countryCodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 123:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->numberOfNavsatsInView);
          this->__isset.numberOfNavsatsInView = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 124:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->positioningMethodSource);
          this->__isset.positioningMethodSource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 125:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast45;
          xfer += iprot->readI32(ecast45);
          this->platformStatus = (PlatformStatus::type)ecast45;
          this->__isset.platformStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 126:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast46;
          xfer += iprot->readI32(ecast46);
          this->sensorControlMode = (SensorControlMode::type)ecast46;
          this->__isset.sensorControlMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 127:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sensorFrameRatePack.read(iprot);
          this->__isset.sensorFrameRatePack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 128:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->wavelengthsList.read(iprot);
          this->__isset.wavelengthsList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 129:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->targetId);
          this->__isset.targetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 130:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->airbaseLocations.read(iprot);
          this->__isset.airbaseLocations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 131:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->takeOffTime);
          this->__isset.takeOffTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 132:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->transmissionFrequency);
          this->__isset.transmissionFrequency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 133:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->onBoardMiStorageCapacity);
          this->__isset.onBoardMiStorageCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 134:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->zoomPercentage);
          this->__isset.zoomPercentage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 135:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->communicationsMethod);
          this->__isset.communicationsMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 136:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->leapSeconds);
          this->__isset.leapSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 137:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->correctionOffset);
          this->__isset.correctionOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 138:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payloadList.read(iprot);
          this->__isset.payloadList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 139:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->activePayloads);
          this->__isset.activePayloads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 140:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->weaponStores.read(iprot);
          this->__isset.weaponStores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 141:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->waypointList.read(iprot);
          this->__isset.waypointList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_checksum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_precisionTimeStamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uasDatalinkLsVersionNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UasDataLinkLocalSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;

  int berLen;
  uint8_t ber[ BER_MAX_BYTES ];

  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UasDataLinkLocalSet");

  xfer += oprot->writeFieldBegin("precisionTimeStamp", ::apache::thrift::protocol::T_I64, 2);
  berLen = ::berUintEncode(uintmax_t(sizeof(this->precisionTimeStamp)), ber, sizeof(ber));
  for( int i = 0; i < berLen; ++i ) {
	  xfer += oprot->writeByte(ber[i]);
  }
  xfer += oprot->writeI64(this->precisionTimeStamp);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.missionId) {
    xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->missionId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformTailNumber) {
    xfer += oprot->writeFieldBegin("platformTailNumber", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->platformTailNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformHeadingAngle) {
    xfer += oprot->writeFieldBegin("platformHeadingAngle", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->platformHeadingAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformPitchAngle) {
    xfer += oprot->writeFieldBegin("platformPitchAngle", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->platformPitchAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformRollAngle) {
    xfer += oprot->writeFieldBegin("platformRollAngle", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->platformRollAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformTrueAirspeed) {
    xfer += oprot->writeFieldBegin("platformTrueAirspeed", ::apache::thrift::protocol::T_BYTE, 8);
    xfer += oprot->writeByte(this->platformTrueAirspeed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformIndicatedAirspeed) {
    xfer += oprot->writeFieldBegin("platformIndicatedAirspeed", ::apache::thrift::protocol::T_BYTE, 9);
    xfer += oprot->writeByte(this->platformIndicatedAirspeed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformDesignation) {
    xfer += oprot->writeFieldBegin("platformDesignation", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->platformDesignation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imageSensorSource) {
    xfer += oprot->writeFieldBegin("imageSensorSource", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->imageSensorSource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imageCoordinateSystem) {
    xfer += oprot->writeFieldBegin("imageCoordinateSystem", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->imageCoordinateSystem);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorLattitude) {
    xfer += oprot->writeFieldBegin("sensorLattitude", ::apache::thrift::protocol::T_DOUBLE, 13);
    xfer += oprot->writeDouble(this->sensorLattitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorLongitude) {
    xfer += oprot->writeFieldBegin("sensorLongitude", ::apache::thrift::protocol::T_DOUBLE, 14);
    xfer += oprot->writeDouble(this->sensorLongitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorTrueAltitude) {
    xfer += oprot->writeFieldBegin("sensorTrueAltitude", ::apache::thrift::protocol::T_DOUBLE, 15);
    xfer += oprot->writeDouble(this->sensorTrueAltitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorHorizontalFieldOfView) {
    xfer += oprot->writeFieldBegin("sensorHorizontalFieldOfView", ::apache::thrift::protocol::T_DOUBLE, 16);
    xfer += oprot->writeDouble(this->sensorHorizontalFieldOfView);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorVerticalFieldOfView) {
    xfer += oprot->writeFieldBegin("sensorVerticalFieldOfView", ::apache::thrift::protocol::T_DOUBLE, 17);
    xfer += oprot->writeDouble(this->sensorVerticalFieldOfView);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorRelativeAzimuthAngle) {
    xfer += oprot->writeFieldBegin("sensorRelativeAzimuthAngle", ::apache::thrift::protocol::T_DOUBLE, 18);
    xfer += oprot->writeDouble(this->sensorRelativeAzimuthAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorRelativeElevationAngle) {
    xfer += oprot->writeFieldBegin("sensorRelativeElevationAngle", ::apache::thrift::protocol::T_DOUBLE, 19);
    xfer += oprot->writeDouble(this->sensorRelativeElevationAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorRelativeRollAngle) {
    xfer += oprot->writeFieldBegin("sensorRelativeRollAngle", ::apache::thrift::protocol::T_DOUBLE, 20);
    xfer += oprot->writeDouble(this->sensorRelativeRollAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.slantRange) {
    xfer += oprot->writeFieldBegin("slantRange", ::apache::thrift::protocol::T_DOUBLE, 21);
    xfer += oprot->writeDouble(this->slantRange);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetWidth) {
    xfer += oprot->writeFieldBegin("targetWidth", ::apache::thrift::protocol::T_DOUBLE, 22);
    xfer += oprot->writeDouble(this->targetWidth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frameCenterLatitude) {
    xfer += oprot->writeFieldBegin("frameCenterLatitude", ::apache::thrift::protocol::T_DOUBLE, 23);
    xfer += oprot->writeDouble(this->frameCenterLatitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frameCenterLongitude) {
    xfer += oprot->writeFieldBegin("frameCenterLongitude", ::apache::thrift::protocol::T_DOUBLE, 24);
    xfer += oprot->writeDouble(this->frameCenterLongitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frameCenterElevation) {
    xfer += oprot->writeFieldBegin("frameCenterElevation", ::apache::thrift::protocol::T_DOUBLE, 25);
    xfer += oprot->writeDouble(this->frameCenterElevation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLatitudePoint1) {
    xfer += oprot->writeFieldBegin("offsetCornerLatitudePoint1", ::apache::thrift::protocol::T_DOUBLE, 26);
    xfer += oprot->writeDouble(this->offsetCornerLatitudePoint1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLongitudePoint1) {
    xfer += oprot->writeFieldBegin("offsetCornerLongitudePoint1", ::apache::thrift::protocol::T_DOUBLE, 27);
    xfer += oprot->writeDouble(this->offsetCornerLongitudePoint1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLatitudePoint2) {
    xfer += oprot->writeFieldBegin("offsetCornerLatitudePoint2", ::apache::thrift::protocol::T_DOUBLE, 28);
    xfer += oprot->writeDouble(this->offsetCornerLatitudePoint2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLongitudePoint2) {
    xfer += oprot->writeFieldBegin("offsetCornerLongitudePoint2", ::apache::thrift::protocol::T_DOUBLE, 29);
    xfer += oprot->writeDouble(this->offsetCornerLongitudePoint2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLatitudePoint3) {
    xfer += oprot->writeFieldBegin("offsetCornerLatitudePoint3", ::apache::thrift::protocol::T_DOUBLE, 30);
    xfer += oprot->writeDouble(this->offsetCornerLatitudePoint3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLongitudePoint3) {
    xfer += oprot->writeFieldBegin("offsetCornerLongitudePoint3", ::apache::thrift::protocol::T_DOUBLE, 31);
    xfer += oprot->writeDouble(this->offsetCornerLongitudePoint3);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLatitudePoint4) {
    xfer += oprot->writeFieldBegin("offsetCornerLatitudePoint4", ::apache::thrift::protocol::T_DOUBLE, 32);
    xfer += oprot->writeDouble(this->offsetCornerLatitudePoint4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offsetCornerLongitudePoint4) {
    xfer += oprot->writeFieldBegin("offsetCornerLongitudePoint4", ::apache::thrift::protocol::T_DOUBLE, 33);
    xfer += oprot->writeDouble(this->offsetCornerLongitudePoint4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.icingDetected) {
    xfer += oprot->writeFieldBegin("icingDetected", ::apache::thrift::protocol::T_BOOL, 34);
    xfer += oprot->writeBool(this->icingDetected);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.windDirection) {
    xfer += oprot->writeFieldBegin("windDirection", ::apache::thrift::protocol::T_DOUBLE, 35);
    xfer += oprot->writeDouble(this->windDirection);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.windSpeed) {
    xfer += oprot->writeFieldBegin("windSpeed", ::apache::thrift::protocol::T_DOUBLE, 36);
    xfer += oprot->writeDouble(this->windSpeed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.staticPressure) {
    xfer += oprot->writeFieldBegin("staticPressure", ::apache::thrift::protocol::T_DOUBLE, 37);
    xfer += oprot->writeDouble(this->staticPressure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.densityAltitude) {
    xfer += oprot->writeFieldBegin("densityAltitude", ::apache::thrift::protocol::T_I16, 38);
    xfer += oprot->writeI16(this->densityAltitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outsideAirTemperature) {
    xfer += oprot->writeFieldBegin("outsideAirTemperature", ::apache::thrift::protocol::T_BYTE, 39);
    xfer += oprot->writeByte(this->outsideAirTemperature);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetLocationLatitude) {
    xfer += oprot->writeFieldBegin("targetLocationLatitude", ::apache::thrift::protocol::T_DOUBLE, 40);
    xfer += oprot->writeDouble(this->targetLocationLatitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetLocationLongitude) {
    xfer += oprot->writeFieldBegin("targetLocationLongitude", ::apache::thrift::protocol::T_DOUBLE, 41);
    xfer += oprot->writeDouble(this->targetLocationLongitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetLocationElevation) {
    xfer += oprot->writeFieldBegin("targetLocationElevation", ::apache::thrift::protocol::T_DOUBLE, 42);
    xfer += oprot->writeDouble(this->targetLocationElevation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetTrackGateWidth) {
    xfer += oprot->writeFieldBegin("targetTrackGateWidth", ::apache::thrift::protocol::T_I16, 43);
    xfer += oprot->writeI16(this->targetTrackGateWidth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetTrackGateHeight) {
    xfer += oprot->writeFieldBegin("targetTrackGateHeight", ::apache::thrift::protocol::T_I16, 44);
    xfer += oprot->writeI16(this->targetTrackGateHeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetErrorEstimateCe90) {
    xfer += oprot->writeFieldBegin("targetErrorEstimateCe90", ::apache::thrift::protocol::T_DOUBLE, 45);
    xfer += oprot->writeDouble(this->targetErrorEstimateCe90);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetErrorEstimateLe90) {
    xfer += oprot->writeFieldBegin("targetErrorEstimateLe90", ::apache::thrift::protocol::T_DOUBLE, 46);
    xfer += oprot->writeDouble(this->targetErrorEstimateLe90);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.genericFlagData) {
    xfer += oprot->writeFieldBegin("genericFlagData", ::apache::thrift::protocol::T_I32, 47);
    xfer += oprot->writeI32((int32_t)this->genericFlagData);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.securityLocalSet) {
    xfer += oprot->writeFieldBegin("securityLocalSet", ::apache::thrift::protocol::T_STRUCT, 48);
    xfer += this->securityLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.differentialPressure) {
    xfer += oprot->writeFieldBegin("differentialPressure", ::apache::thrift::protocol::T_DOUBLE, 49);
    xfer += oprot->writeDouble(this->differentialPressure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformAngleOfAttack) {
    xfer += oprot->writeFieldBegin("platformAngleOfAttack", ::apache::thrift::protocol::T_DOUBLE, 50);
    xfer += oprot->writeDouble(this->platformAngleOfAttack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformVerticalSpeed) {
    xfer += oprot->writeFieldBegin("platformVerticalSpeed", ::apache::thrift::protocol::T_DOUBLE, 51);
    xfer += oprot->writeDouble(this->platformVerticalSpeed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformSideslipAngle) {
    xfer += oprot->writeFieldBegin("platformSideslipAngle", ::apache::thrift::protocol::T_DOUBLE, 52);
    xfer += oprot->writeDouble(this->platformSideslipAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.airfieldBarometricPressure) {
    xfer += oprot->writeFieldBegin("airfieldBarometricPressure", ::apache::thrift::protocol::T_DOUBLE, 53);
    xfer += oprot->writeDouble(this->airfieldBarometricPressure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.airfieldElevation) {
    xfer += oprot->writeFieldBegin("airfieldElevation", ::apache::thrift::protocol::T_DOUBLE, 54);
    xfer += oprot->writeDouble(this->airfieldElevation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.relativeHumidity) {
    xfer += oprot->writeFieldBegin("relativeHumidity", ::apache::thrift::protocol::T_DOUBLE, 55);
    xfer += oprot->writeDouble(this->relativeHumidity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformGroundSpeed) {
    xfer += oprot->writeFieldBegin("platformGroundSpeed", ::apache::thrift::protocol::T_BYTE, 56);
    xfer += oprot->writeByte(this->platformGroundSpeed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groundRange) {
    xfer += oprot->writeFieldBegin("groundRange", ::apache::thrift::protocol::T_DOUBLE, 57);
    xfer += oprot->writeDouble(this->groundRange);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformFuelRemaining) {
    xfer += oprot->writeFieldBegin("platformFuelRemaining", ::apache::thrift::protocol::T_I16, 58);
    xfer += oprot->writeI16(this->platformFuelRemaining);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformCallSign) {
    xfer += oprot->writeFieldBegin("platformCallSign", ::apache::thrift::protocol::T_STRING, 59);
    xfer += oprot->writeString(this->platformCallSign);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.weaponLoad) {
    xfer += oprot->writeFieldBegin("weaponLoad", ::apache::thrift::protocol::T_I16, 60);
    xfer += oprot->writeI16(this->weaponLoad);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.weaponFired) {
    xfer += oprot->writeFieldBegin("weaponFired", ::apache::thrift::protocol::T_BYTE, 61);
    xfer += oprot->writeByte(this->weaponFired);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.laserPrfCode) {
    xfer += oprot->writeFieldBegin("laserPrfCode", ::apache::thrift::protocol::T_I16, 62);
    xfer += oprot->writeI16(this->laserPrfCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorFieldOfViewName) {
    xfer += oprot->writeFieldBegin("sensorFieldOfViewName", ::apache::thrift::protocol::T_I32, 63);
    xfer += oprot->writeI32((int32_t)this->sensorFieldOfViewName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformMagneticHeading) {
    xfer += oprot->writeFieldBegin("platformMagneticHeading", ::apache::thrift::protocol::T_DOUBLE, 64);
    xfer += oprot->writeDouble(this->platformMagneticHeading);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("uasDatalinkLsVersionNumber", ::apache::thrift::protocol::T_BYTE, 65);
  berLen = ::berUintEncode(uintmax_t(sizeof(this->uasDatalinkLsVersionNumber)), ber, sizeof(ber));
  for( int i = 0; i < berLen; ++i ) {
	  xfer += oprot->writeByte(ber[i]);
  }
  xfer += oprot->writeByte(this->uasDatalinkLsVersionNumber);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.invalid) {
    xfer += oprot->writeFieldBegin("invalid", ::apache::thrift::protocol::T_BYTE, 66);
    xfer += oprot->writeByte(this->invalid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformLatitude) {
    xfer += oprot->writeFieldBegin("alternatePlatformLatitude", ::apache::thrift::protocol::T_DOUBLE, 67);
    xfer += oprot->writeDouble(this->alternatePlatformLatitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformLongitude) {
    xfer += oprot->writeFieldBegin("alternatePlatformLongitude", ::apache::thrift::protocol::T_DOUBLE, 68);
    xfer += oprot->writeDouble(this->alternatePlatformLongitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformAltitude) {
    xfer += oprot->writeFieldBegin("alternatePlatformAltitude", ::apache::thrift::protocol::T_DOUBLE, 69);
    xfer += oprot->writeDouble(this->alternatePlatformAltitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformName) {
    xfer += oprot->writeFieldBegin("alternatePlatformName", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->alternatePlatformName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformHeading) {
    xfer += oprot->writeFieldBegin("alternatePlatformHeading", ::apache::thrift::protocol::T_DOUBLE, 71);
    xfer += oprot->writeDouble(this->alternatePlatformHeading);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventStartTimeUtc) {
    xfer += oprot->writeFieldBegin("eventStartTimeUtc", ::apache::thrift::protocol::T_I64, 72);
    xfer += oprot->writeI64(this->eventStartTimeUtc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rvtLocalSet) {
    xfer += oprot->writeFieldBegin("rvtLocalSet", ::apache::thrift::protocol::T_STRUCT, 73);
    xfer += this->rvtLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vmtiLocalSet) {
    xfer += oprot->writeFieldBegin("vmtiLocalSet", ::apache::thrift::protocol::T_STRUCT, 74);
    xfer += this->vmtiLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorEllipsoidHeight) {
    xfer += oprot->writeFieldBegin("sensorEllipsoidHeight", ::apache::thrift::protocol::T_DOUBLE, 75);
    xfer += oprot->writeDouble(this->sensorEllipsoidHeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformEllipsoidHeight) {
    xfer += oprot->writeFieldBegin("alternatePlatformEllipsoidHeight", ::apache::thrift::protocol::T_DOUBLE, 76);
    xfer += oprot->writeDouble(this->alternatePlatformEllipsoidHeight);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operationalMode) {
    xfer += oprot->writeFieldBegin("operationalMode", ::apache::thrift::protocol::T_I32, 77);
    xfer += oprot->writeI32((int32_t)this->operationalMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frameCenterHeightAboveEllipsoid) {
    xfer += oprot->writeFieldBegin("frameCenterHeightAboveEllipsoid", ::apache::thrift::protocol::T_DOUBLE, 78);
    xfer += oprot->writeDouble(this->frameCenterHeightAboveEllipsoid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorNorthVelocity) {
    xfer += oprot->writeFieldBegin("sensorNorthVelocity", ::apache::thrift::protocol::T_DOUBLE, 79);
    xfer += oprot->writeDouble(this->sensorNorthVelocity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorEastVelocity) {
    xfer += oprot->writeFieldBegin("sensorEastVelocity", ::apache::thrift::protocol::T_DOUBLE, 80);
    xfer += oprot->writeDouble(this->sensorEastVelocity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imageHorizonPixelPack) {
    xfer += oprot->writeFieldBegin("imageHorizonPixelPack", ::apache::thrift::protocol::T_STRUCT, 81);
    xfer += this->imageHorizonPixelPack.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLatitudePoint1_Full) {
    xfer += oprot->writeFieldBegin("cornerLatitudePoint1_Full", ::apache::thrift::protocol::T_DOUBLE, 82);
    xfer += oprot->writeDouble(this->cornerLatitudePoint1_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLongitudePoint1_Full) {
    xfer += oprot->writeFieldBegin("cornerLongitudePoint1_Full", ::apache::thrift::protocol::T_DOUBLE, 83);
    xfer += oprot->writeDouble(this->cornerLongitudePoint1_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLatitudePoint2_Full) {
    xfer += oprot->writeFieldBegin("cornerLatitudePoint2_Full", ::apache::thrift::protocol::T_DOUBLE, 84);
    xfer += oprot->writeDouble(this->cornerLatitudePoint2_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLongitudePoint2_Full) {
    xfer += oprot->writeFieldBegin("cornerLongitudePoint2_Full", ::apache::thrift::protocol::T_DOUBLE, 85);
    xfer += oprot->writeDouble(this->cornerLongitudePoint2_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLatitudePoint3_Full) {
    xfer += oprot->writeFieldBegin("cornerLatitudePoint3_Full", ::apache::thrift::protocol::T_DOUBLE, 86);
    xfer += oprot->writeDouble(this->cornerLatitudePoint3_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLongitudePoint3_Full) {
    xfer += oprot->writeFieldBegin("cornerLongitudePoint3_Full", ::apache::thrift::protocol::T_DOUBLE, 87);
    xfer += oprot->writeDouble(this->cornerLongitudePoint3_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLatitudePoint4_Full) {
    xfer += oprot->writeFieldBegin("cornerLatitudePoint4_Full", ::apache::thrift::protocol::T_DOUBLE, 88);
    xfer += oprot->writeDouble(this->cornerLatitudePoint4_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cornerLongitudePoint4_Full) {
    xfer += oprot->writeFieldBegin("cornerLongitudePoint4_Full", ::apache::thrift::protocol::T_DOUBLE, 89);
    xfer += oprot->writeDouble(this->cornerLongitudePoint4_Full);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformPitchAngleFull) {
    xfer += oprot->writeFieldBegin("platformPitchAngleFull", ::apache::thrift::protocol::T_DOUBLE, 90);
    xfer += oprot->writeDouble(this->platformPitchAngleFull);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformRollAngleFull) {
    xfer += oprot->writeFieldBegin("platformRollAngleFull", ::apache::thrift::protocol::T_DOUBLE, 91);
    xfer += oprot->writeDouble(this->platformRollAngleFull);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformAngleOfAttackFull) {
    xfer += oprot->writeFieldBegin("platformAngleOfAttackFull", ::apache::thrift::protocol::T_DOUBLE, 92);
    xfer += oprot->writeDouble(this->platformAngleOfAttackFull);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformSideslipAngleFull) {
    xfer += oprot->writeFieldBegin("platformSideslipAngleFull", ::apache::thrift::protocol::T_DOUBLE, 93);
    xfer += oprot->writeDouble(this->platformSideslipAngleFull);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.miisCoreIdentifier) {
    xfer += oprot->writeFieldBegin("miisCoreIdentifier", ::apache::thrift::protocol::T_STRING, 94);
    xfer += oprot->writeBinary(this->miisCoreIdentifier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sarMotionImageryLocalSet) {
    xfer += oprot->writeFieldBegin("sarMotionImageryLocalSet", ::apache::thrift::protocol::T_STRUCT, 95);
    xfer += this->sarMotionImageryLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetWidthExtended) {
    xfer += oprot->writeFieldBegin("targetWidthExtended", ::apache::thrift::protocol::T_DOUBLE, 96);
    xfer += oprot->writeDouble(this->targetWidthExtended);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rangeImageLocalSet) {
    xfer += oprot->writeFieldBegin("rangeImageLocalSet", ::apache::thrift::protocol::T_STRUCT, 97);
    xfer += this->rangeImageLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.geoRegistrationLocalSet) {
    xfer += oprot->writeFieldBegin("geoRegistrationLocalSet", ::apache::thrift::protocol::T_STRUCT, 98);
    xfer += this->geoRegistrationLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.compositeImagingLocalSet) {
    xfer += oprot->writeFieldBegin("compositeImagingLocalSet", ::apache::thrift::protocol::T_STRUCT, 99);
    xfer += this->compositeImagingLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.segmentLocalSet) {
    xfer += oprot->writeFieldBegin("segmentLocalSet", ::apache::thrift::protocol::T_STRUCT, 100);
    xfer += this->segmentLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.amendLocalSet) {
    xfer += oprot->writeFieldBegin("amendLocalSet", ::apache::thrift::protocol::T_STRUCT, 101);
    xfer += this->amendLocalSet.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sdccFlp) {
    xfer += oprot->writeFieldBegin("sdccFlp", ::apache::thrift::protocol::T_STRUCT, 102);
    xfer += this->sdccFlp.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.densityAltitudeExtended) {
    xfer += oprot->writeFieldBegin("densityAltitudeExtended", ::apache::thrift::protocol::T_DOUBLE, 103);
    xfer += oprot->writeDouble(this->densityAltitudeExtended);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorEllipsoidHeightExtended) {
    xfer += oprot->writeFieldBegin("sensorEllipsoidHeightExtended", ::apache::thrift::protocol::T_DOUBLE, 104);
    xfer += oprot->writeDouble(this->sensorEllipsoidHeightExtended);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternatePlatformEllipsoidHeightExtended) {
    xfer += oprot->writeFieldBegin("alternatePlatformEllipsoidHeightExtended", ::apache::thrift::protocol::T_DOUBLE, 105);
    xfer += oprot->writeDouble(this->alternatePlatformEllipsoidHeightExtended);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.streamDesignator) {
    xfer += oprot->writeFieldBegin("streamDesignator", ::apache::thrift::protocol::T_STRING, 106);
    xfer += oprot->writeString(this->streamDesignator);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operationalBase) {
    xfer += oprot->writeFieldBegin("operationalBase", ::apache::thrift::protocol::T_STRING, 107);
    xfer += oprot->writeString(this->operationalBase);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.broadcastSource) {
    xfer += oprot->writeFieldBegin("broadcastSource", ::apache::thrift::protocol::T_STRING, 108);
    xfer += oprot->writeString(this->broadcastSource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rangeToRecoveryLocation) {
    xfer += oprot->writeFieldBegin("rangeToRecoveryLocation", ::apache::thrift::protocol::T_DOUBLE, 109);
    xfer += oprot->writeDouble(this->rangeToRecoveryLocation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timeAirborne) {
    xfer += oprot->writeFieldBegin("timeAirborne", ::apache::thrift::protocol::T_I32, 110);
    xfer += oprot->writeI32(this->timeAirborne);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.propulsionUnitSpeed) {
    xfer += oprot->writeFieldBegin("propulsionUnitSpeed", ::apache::thrift::protocol::T_I32, 111);
    xfer += oprot->writeI32(this->propulsionUnitSpeed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformCourseAngle) {
    xfer += oprot->writeFieldBegin("platformCourseAngle", ::apache::thrift::protocol::T_DOUBLE, 112);
    xfer += oprot->writeDouble(this->platformCourseAngle);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.altitudeAgl) {
    xfer += oprot->writeFieldBegin("altitudeAgl", ::apache::thrift::protocol::T_DOUBLE, 113);
    xfer += oprot->writeDouble(this->altitudeAgl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.radarAltimeter) {
    xfer += oprot->writeFieldBegin("radarAltimeter", ::apache::thrift::protocol::T_DOUBLE, 114);
    xfer += oprot->writeDouble(this->radarAltimeter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.controlCommand) {
    xfer += oprot->writeFieldBegin("controlCommand", ::apache::thrift::protocol::T_STRUCT, 115);
    xfer += this->controlCommand.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.controlCommandVerificationList) {
    xfer += oprot->writeFieldBegin("controlCommandVerificationList", ::apache::thrift::protocol::T_STRUCT, 116);
    xfer += this->controlCommandVerificationList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorAzimuthRate) {
    xfer += oprot->writeFieldBegin("sensorAzimuthRate", ::apache::thrift::protocol::T_DOUBLE, 117);
    xfer += oprot->writeDouble(this->sensorAzimuthRate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorElevationRate) {
    xfer += oprot->writeFieldBegin("sensorElevationRate", ::apache::thrift::protocol::T_DOUBLE, 118);
    xfer += oprot->writeDouble(this->sensorElevationRate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorRollRate) {
    xfer += oprot->writeFieldBegin("sensorRollRate", ::apache::thrift::protocol::T_DOUBLE, 119);
    xfer += oprot->writeDouble(this->sensorRollRate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.onBoardMiStoragePercentFull) {
    xfer += oprot->writeFieldBegin("onBoardMiStoragePercentFull", ::apache::thrift::protocol::T_DOUBLE, 120);
    xfer += oprot->writeDouble(this->onBoardMiStoragePercentFull);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeWavelengthList) {
    xfer += oprot->writeFieldBegin("activeWavelengthList", ::apache::thrift::protocol::T_STRUCT, 121);
    xfer += this->activeWavelengthList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.countryCodes) {
    xfer += oprot->writeFieldBegin("countryCodes", ::apache::thrift::protocol::T_STRUCT, 122);
    xfer += this->countryCodes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.numberOfNavsatsInView) {
    xfer += oprot->writeFieldBegin("numberOfNavsatsInView", ::apache::thrift::protocol::T_BYTE, 123);
    xfer += oprot->writeByte(this->numberOfNavsatsInView);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.positioningMethodSource) {
    xfer += oprot->writeFieldBegin("positioningMethodSource", ::apache::thrift::protocol::T_BYTE, 124);
    xfer += oprot->writeByte(this->positioningMethodSource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformStatus) {
    xfer += oprot->writeFieldBegin("platformStatus", ::apache::thrift::protocol::T_I32, 125);
    xfer += oprot->writeI32((int32_t)this->platformStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorControlMode) {
    xfer += oprot->writeFieldBegin("sensorControlMode", ::apache::thrift::protocol::T_I32, 126);
    xfer += oprot->writeI32((int32_t)this->sensorControlMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sensorFrameRatePack) {
    xfer += oprot->writeFieldBegin("sensorFrameRatePack", ::apache::thrift::protocol::T_STRUCT, 127);
    xfer += this->sensorFrameRatePack.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wavelengthsList) {
    xfer += oprot->writeFieldBegin("wavelengthsList", ::apache::thrift::protocol::T_STRUCT, 128);
    xfer += this->wavelengthsList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targetId) {
    xfer += oprot->writeFieldBegin("targetId", ::apache::thrift::protocol::T_STRING, 129);
    xfer += oprot->writeString(this->targetId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.airbaseLocations) {
    xfer += oprot->writeFieldBegin("airbaseLocations", ::apache::thrift::protocol::T_STRUCT, 130);
    xfer += this->airbaseLocations.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.takeOffTime) {
    xfer += oprot->writeFieldBegin("takeOffTime", ::apache::thrift::protocol::T_I64, 131);
    xfer += oprot->writeI64(this->takeOffTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transmissionFrequency) {
    xfer += oprot->writeFieldBegin("transmissionFrequency", ::apache::thrift::protocol::T_DOUBLE, 132);
    xfer += oprot->writeDouble(this->transmissionFrequency);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.onBoardMiStorageCapacity) {
    xfer += oprot->writeFieldBegin("onBoardMiStorageCapacity", ::apache::thrift::protocol::T_I32, 133);
    xfer += oprot->writeI32(this->onBoardMiStorageCapacity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zoomPercentage) {
    xfer += oprot->writeFieldBegin("zoomPercentage", ::apache::thrift::protocol::T_DOUBLE, 134);
    xfer += oprot->writeDouble(this->zoomPercentage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.communicationsMethod) {
    xfer += oprot->writeFieldBegin("communicationsMethod", ::apache::thrift::protocol::T_STRING, 135);
    xfer += oprot->writeString(this->communicationsMethod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leapSeconds) {
    xfer += oprot->writeFieldBegin("leapSeconds", ::apache::thrift::protocol::T_I32, 136);
    xfer += oprot->writeI32(this->leapSeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.correctionOffset) {
    xfer += oprot->writeFieldBegin("correctionOffset", ::apache::thrift::protocol::T_I64, 137);
    xfer += oprot->writeI64(this->correctionOffset);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payloadList) {
    xfer += oprot->writeFieldBegin("payloadList", ::apache::thrift::protocol::T_STRUCT, 138);
    xfer += this->payloadList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activePayloads) {
    xfer += oprot->writeFieldBegin("activePayloads", ::apache::thrift::protocol::T_STRING, 139);
    xfer += oprot->writeBinary(this->activePayloads);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.weaponStores) {
    xfer += oprot->writeFieldBegin("weaponStores", ::apache::thrift::protocol::T_STRUCT, 140);
    xfer += this->weaponStores.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.waypointList) {
    xfer += oprot->writeFieldBegin("waypointList", ::apache::thrift::protocol::T_STRUCT, 141);
    xfer += this->waypointList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();

  xfer += oprot->writeFieldBegin("checksum", ::apache::thrift::protocol::T_I16, 1);
  berLen = ::berUintEncode(uintmax_t(sizeof(this->checksum)), ber, sizeof(ber));
  for( int i = 0; i < berLen; ++i ) {
	  xfer += oprot->writeByte(ber[i]);
  }
  xfer += oprot->writeI16(this->checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UasDataLinkLocalSet &a, UasDataLinkLocalSet &b) {
  using ::std::swap;
  swap(a.checksum, b.checksum);
  swap(a.precisionTimeStamp, b.precisionTimeStamp);
  swap(a.missionId, b.missionId);
  swap(a.platformTailNumber, b.platformTailNumber);
  swap(a.platformHeadingAngle, b.platformHeadingAngle);
  swap(a.platformPitchAngle, b.platformPitchAngle);
  swap(a.platformRollAngle, b.platformRollAngle);
  swap(a.platformTrueAirspeed, b.platformTrueAirspeed);
  swap(a.platformIndicatedAirspeed, b.platformIndicatedAirspeed);
  swap(a.platformDesignation, b.platformDesignation);
  swap(a.imageSensorSource, b.imageSensorSource);
  swap(a.imageCoordinateSystem, b.imageCoordinateSystem);
  swap(a.sensorLattitude, b.sensorLattitude);
  swap(a.sensorLongitude, b.sensorLongitude);
  swap(a.sensorTrueAltitude, b.sensorTrueAltitude);
  swap(a.sensorHorizontalFieldOfView, b.sensorHorizontalFieldOfView);
  swap(a.sensorVerticalFieldOfView, b.sensorVerticalFieldOfView);
  swap(a.sensorRelativeAzimuthAngle, b.sensorRelativeAzimuthAngle);
  swap(a.sensorRelativeElevationAngle, b.sensorRelativeElevationAngle);
  swap(a.sensorRelativeRollAngle, b.sensorRelativeRollAngle);
  swap(a.slantRange, b.slantRange);
  swap(a.targetWidth, b.targetWidth);
  swap(a.frameCenterLatitude, b.frameCenterLatitude);
  swap(a.frameCenterLongitude, b.frameCenterLongitude);
  swap(a.frameCenterElevation, b.frameCenterElevation);
  swap(a.offsetCornerLatitudePoint1, b.offsetCornerLatitudePoint1);
  swap(a.offsetCornerLongitudePoint1, b.offsetCornerLongitudePoint1);
  swap(a.offsetCornerLatitudePoint2, b.offsetCornerLatitudePoint2);
  swap(a.offsetCornerLongitudePoint2, b.offsetCornerLongitudePoint2);
  swap(a.offsetCornerLatitudePoint3, b.offsetCornerLatitudePoint3);
  swap(a.offsetCornerLongitudePoint3, b.offsetCornerLongitudePoint3);
  swap(a.offsetCornerLatitudePoint4, b.offsetCornerLatitudePoint4);
  swap(a.offsetCornerLongitudePoint4, b.offsetCornerLongitudePoint4);
  swap(a.icingDetected, b.icingDetected);
  swap(a.windDirection, b.windDirection);
  swap(a.windSpeed, b.windSpeed);
  swap(a.staticPressure, b.staticPressure);
  swap(a.densityAltitude, b.densityAltitude);
  swap(a.outsideAirTemperature, b.outsideAirTemperature);
  swap(a.targetLocationLatitude, b.targetLocationLatitude);
  swap(a.targetLocationLongitude, b.targetLocationLongitude);
  swap(a.targetLocationElevation, b.targetLocationElevation);
  swap(a.targetTrackGateWidth, b.targetTrackGateWidth);
  swap(a.targetTrackGateHeight, b.targetTrackGateHeight);
  swap(a.targetErrorEstimateCe90, b.targetErrorEstimateCe90);
  swap(a.targetErrorEstimateLe90, b.targetErrorEstimateLe90);
  swap(a.genericFlagData, b.genericFlagData);
  swap(a.securityLocalSet, b.securityLocalSet);
  swap(a.differentialPressure, b.differentialPressure);
  swap(a.platformAngleOfAttack, b.platformAngleOfAttack);
  swap(a.platformVerticalSpeed, b.platformVerticalSpeed);
  swap(a.platformSideslipAngle, b.platformSideslipAngle);
  swap(a.airfieldBarometricPressure, b.airfieldBarometricPressure);
  swap(a.airfieldElevation, b.airfieldElevation);
  swap(a.relativeHumidity, b.relativeHumidity);
  swap(a.platformGroundSpeed, b.platformGroundSpeed);
  swap(a.groundRange, b.groundRange);
  swap(a.platformFuelRemaining, b.platformFuelRemaining);
  swap(a.platformCallSign, b.platformCallSign);
  swap(a.weaponLoad, b.weaponLoad);
  swap(a.weaponFired, b.weaponFired);
  swap(a.laserPrfCode, b.laserPrfCode);
  swap(a.sensorFieldOfViewName, b.sensorFieldOfViewName);
  swap(a.platformMagneticHeading, b.platformMagneticHeading);
  swap(a.uasDatalinkLsVersionNumber, b.uasDatalinkLsVersionNumber);
  swap(a.invalid, b.invalid);
  swap(a.alternatePlatformLatitude, b.alternatePlatformLatitude);
  swap(a.alternatePlatformLongitude, b.alternatePlatformLongitude);
  swap(a.alternatePlatformAltitude, b.alternatePlatformAltitude);
  swap(a.alternatePlatformName, b.alternatePlatformName);
  swap(a.alternatePlatformHeading, b.alternatePlatformHeading);
  swap(a.eventStartTimeUtc, b.eventStartTimeUtc);
  swap(a.rvtLocalSet, b.rvtLocalSet);
  swap(a.vmtiLocalSet, b.vmtiLocalSet);
  swap(a.sensorEllipsoidHeight, b.sensorEllipsoidHeight);
  swap(a.alternatePlatformEllipsoidHeight, b.alternatePlatformEllipsoidHeight);
  swap(a.operationalMode, b.operationalMode);
  swap(a.frameCenterHeightAboveEllipsoid, b.frameCenterHeightAboveEllipsoid);
  swap(a.sensorNorthVelocity, b.sensorNorthVelocity);
  swap(a.sensorEastVelocity, b.sensorEastVelocity);
  swap(a.imageHorizonPixelPack, b.imageHorizonPixelPack);
  swap(a.cornerLatitudePoint1_Full, b.cornerLatitudePoint1_Full);
  swap(a.cornerLongitudePoint1_Full, b.cornerLongitudePoint1_Full);
  swap(a.cornerLatitudePoint2_Full, b.cornerLatitudePoint2_Full);
  swap(a.cornerLongitudePoint2_Full, b.cornerLongitudePoint2_Full);
  swap(a.cornerLatitudePoint3_Full, b.cornerLatitudePoint3_Full);
  swap(a.cornerLongitudePoint3_Full, b.cornerLongitudePoint3_Full);
  swap(a.cornerLatitudePoint4_Full, b.cornerLatitudePoint4_Full);
  swap(a.cornerLongitudePoint4_Full, b.cornerLongitudePoint4_Full);
  swap(a.platformPitchAngleFull, b.platformPitchAngleFull);
  swap(a.platformRollAngleFull, b.platformRollAngleFull);
  swap(a.platformAngleOfAttackFull, b.platformAngleOfAttackFull);
  swap(a.platformSideslipAngleFull, b.platformSideslipAngleFull);
  swap(a.miisCoreIdentifier, b.miisCoreIdentifier);
  swap(a.sarMotionImageryLocalSet, b.sarMotionImageryLocalSet);
  swap(a.targetWidthExtended, b.targetWidthExtended);
  swap(a.rangeImageLocalSet, b.rangeImageLocalSet);
  swap(a.geoRegistrationLocalSet, b.geoRegistrationLocalSet);
  swap(a.compositeImagingLocalSet, b.compositeImagingLocalSet);
  swap(a.segmentLocalSet, b.segmentLocalSet);
  swap(a.amendLocalSet, b.amendLocalSet);
  swap(a.sdccFlp, b.sdccFlp);
  swap(a.densityAltitudeExtended, b.densityAltitudeExtended);
  swap(a.sensorEllipsoidHeightExtended, b.sensorEllipsoidHeightExtended);
  swap(a.alternatePlatformEllipsoidHeightExtended, b.alternatePlatformEllipsoidHeightExtended);
  swap(a.streamDesignator, b.streamDesignator);
  swap(a.operationalBase, b.operationalBase);
  swap(a.broadcastSource, b.broadcastSource);
  swap(a.rangeToRecoveryLocation, b.rangeToRecoveryLocation);
  swap(a.timeAirborne, b.timeAirborne);
  swap(a.propulsionUnitSpeed, b.propulsionUnitSpeed);
  swap(a.platformCourseAngle, b.platformCourseAngle);
  swap(a.altitudeAgl, b.altitudeAgl);
  swap(a.radarAltimeter, b.radarAltimeter);
  swap(a.controlCommand, b.controlCommand);
  swap(a.controlCommandVerificationList, b.controlCommandVerificationList);
  swap(a.sensorAzimuthRate, b.sensorAzimuthRate);
  swap(a.sensorElevationRate, b.sensorElevationRate);
  swap(a.sensorRollRate, b.sensorRollRate);
  swap(a.onBoardMiStoragePercentFull, b.onBoardMiStoragePercentFull);
  swap(a.activeWavelengthList, b.activeWavelengthList);
  swap(a.countryCodes, b.countryCodes);
  swap(a.numberOfNavsatsInView, b.numberOfNavsatsInView);
  swap(a.positioningMethodSource, b.positioningMethodSource);
  swap(a.platformStatus, b.platformStatus);
  swap(a.sensorControlMode, b.sensorControlMode);
  swap(a.sensorFrameRatePack, b.sensorFrameRatePack);
  swap(a.wavelengthsList, b.wavelengthsList);
  swap(a.targetId, b.targetId);
  swap(a.airbaseLocations, b.airbaseLocations);
  swap(a.takeOffTime, b.takeOffTime);
  swap(a.transmissionFrequency, b.transmissionFrequency);
  swap(a.onBoardMiStorageCapacity, b.onBoardMiStorageCapacity);
  swap(a.zoomPercentage, b.zoomPercentage);
  swap(a.communicationsMethod, b.communicationsMethod);
  swap(a.leapSeconds, b.leapSeconds);
  swap(a.correctionOffset, b.correctionOffset);
  swap(a.payloadList, b.payloadList);
  swap(a.activePayloads, b.activePayloads);
  swap(a.weaponStores, b.weaponStores);
  swap(a.waypointList, b.waypointList);
  swap(a.__isset, b.__isset);
}

UasDataLinkLocalSet::UasDataLinkLocalSet(const UasDataLinkLocalSet& other47) {
  checksum = other47.checksum;
  precisionTimeStamp = other47.precisionTimeStamp;
  missionId = other47.missionId;
  platformTailNumber = other47.platformTailNumber;
  platformHeadingAngle = other47.platformHeadingAngle;
  platformPitchAngle = other47.platformPitchAngle;
  platformRollAngle = other47.platformRollAngle;
  platformTrueAirspeed = other47.platformTrueAirspeed;
  platformIndicatedAirspeed = other47.platformIndicatedAirspeed;
  platformDesignation = other47.platformDesignation;
  imageSensorSource = other47.imageSensorSource;
  imageCoordinateSystem = other47.imageCoordinateSystem;
  sensorLattitude = other47.sensorLattitude;
  sensorLongitude = other47.sensorLongitude;
  sensorTrueAltitude = other47.sensorTrueAltitude;
  sensorHorizontalFieldOfView = other47.sensorHorizontalFieldOfView;
  sensorVerticalFieldOfView = other47.sensorVerticalFieldOfView;
  sensorRelativeAzimuthAngle = other47.sensorRelativeAzimuthAngle;
  sensorRelativeElevationAngle = other47.sensorRelativeElevationAngle;
  sensorRelativeRollAngle = other47.sensorRelativeRollAngle;
  slantRange = other47.slantRange;
  targetWidth = other47.targetWidth;
  frameCenterLatitude = other47.frameCenterLatitude;
  frameCenterLongitude = other47.frameCenterLongitude;
  frameCenterElevation = other47.frameCenterElevation;
  offsetCornerLatitudePoint1 = other47.offsetCornerLatitudePoint1;
  offsetCornerLongitudePoint1 = other47.offsetCornerLongitudePoint1;
  offsetCornerLatitudePoint2 = other47.offsetCornerLatitudePoint2;
  offsetCornerLongitudePoint2 = other47.offsetCornerLongitudePoint2;
  offsetCornerLatitudePoint3 = other47.offsetCornerLatitudePoint3;
  offsetCornerLongitudePoint3 = other47.offsetCornerLongitudePoint3;
  offsetCornerLatitudePoint4 = other47.offsetCornerLatitudePoint4;
  offsetCornerLongitudePoint4 = other47.offsetCornerLongitudePoint4;
  icingDetected = other47.icingDetected;
  windDirection = other47.windDirection;
  windSpeed = other47.windSpeed;
  staticPressure = other47.staticPressure;
  densityAltitude = other47.densityAltitude;
  outsideAirTemperature = other47.outsideAirTemperature;
  targetLocationLatitude = other47.targetLocationLatitude;
  targetLocationLongitude = other47.targetLocationLongitude;
  targetLocationElevation = other47.targetLocationElevation;
  targetTrackGateWidth = other47.targetTrackGateWidth;
  targetTrackGateHeight = other47.targetTrackGateHeight;
  targetErrorEstimateCe90 = other47.targetErrorEstimateCe90;
  targetErrorEstimateLe90 = other47.targetErrorEstimateLe90;
  genericFlagData = other47.genericFlagData;
  securityLocalSet = other47.securityLocalSet;
  differentialPressure = other47.differentialPressure;
  platformAngleOfAttack = other47.platformAngleOfAttack;
  platformVerticalSpeed = other47.platformVerticalSpeed;
  platformSideslipAngle = other47.platformSideslipAngle;
  airfieldBarometricPressure = other47.airfieldBarometricPressure;
  airfieldElevation = other47.airfieldElevation;
  relativeHumidity = other47.relativeHumidity;
  platformGroundSpeed = other47.platformGroundSpeed;
  groundRange = other47.groundRange;
  platformFuelRemaining = other47.platformFuelRemaining;
  platformCallSign = other47.platformCallSign;
  weaponLoad = other47.weaponLoad;
  weaponFired = other47.weaponFired;
  laserPrfCode = other47.laserPrfCode;
  sensorFieldOfViewName = other47.sensorFieldOfViewName;
  platformMagneticHeading = other47.platformMagneticHeading;
  uasDatalinkLsVersionNumber = other47.uasDatalinkLsVersionNumber;
  invalid = other47.invalid;
  alternatePlatformLatitude = other47.alternatePlatformLatitude;
  alternatePlatformLongitude = other47.alternatePlatformLongitude;
  alternatePlatformAltitude = other47.alternatePlatformAltitude;
  alternatePlatformName = other47.alternatePlatformName;
  alternatePlatformHeading = other47.alternatePlatformHeading;
  eventStartTimeUtc = other47.eventStartTimeUtc;
  rvtLocalSet = other47.rvtLocalSet;
  vmtiLocalSet = other47.vmtiLocalSet;
  sensorEllipsoidHeight = other47.sensorEllipsoidHeight;
  alternatePlatformEllipsoidHeight = other47.alternatePlatformEllipsoidHeight;
  operationalMode = other47.operationalMode;
  frameCenterHeightAboveEllipsoid = other47.frameCenterHeightAboveEllipsoid;
  sensorNorthVelocity = other47.sensorNorthVelocity;
  sensorEastVelocity = other47.sensorEastVelocity;
  imageHorizonPixelPack = other47.imageHorizonPixelPack;
  cornerLatitudePoint1_Full = other47.cornerLatitudePoint1_Full;
  cornerLongitudePoint1_Full = other47.cornerLongitudePoint1_Full;
  cornerLatitudePoint2_Full = other47.cornerLatitudePoint2_Full;
  cornerLongitudePoint2_Full = other47.cornerLongitudePoint2_Full;
  cornerLatitudePoint3_Full = other47.cornerLatitudePoint3_Full;
  cornerLongitudePoint3_Full = other47.cornerLongitudePoint3_Full;
  cornerLatitudePoint4_Full = other47.cornerLatitudePoint4_Full;
  cornerLongitudePoint4_Full = other47.cornerLongitudePoint4_Full;
  platformPitchAngleFull = other47.platformPitchAngleFull;
  platformRollAngleFull = other47.platformRollAngleFull;
  platformAngleOfAttackFull = other47.platformAngleOfAttackFull;
  platformSideslipAngleFull = other47.platformSideslipAngleFull;
  miisCoreIdentifier = other47.miisCoreIdentifier;
  sarMotionImageryLocalSet = other47.sarMotionImageryLocalSet;
  targetWidthExtended = other47.targetWidthExtended;
  rangeImageLocalSet = other47.rangeImageLocalSet;
  geoRegistrationLocalSet = other47.geoRegistrationLocalSet;
  compositeImagingLocalSet = other47.compositeImagingLocalSet;
  segmentLocalSet = other47.segmentLocalSet;
  amendLocalSet = other47.amendLocalSet;
  sdccFlp = other47.sdccFlp;
  densityAltitudeExtended = other47.densityAltitudeExtended;
  sensorEllipsoidHeightExtended = other47.sensorEllipsoidHeightExtended;
  alternatePlatformEllipsoidHeightExtended = other47.alternatePlatformEllipsoidHeightExtended;
  streamDesignator = other47.streamDesignator;
  operationalBase = other47.operationalBase;
  broadcastSource = other47.broadcastSource;
  rangeToRecoveryLocation = other47.rangeToRecoveryLocation;
  timeAirborne = other47.timeAirborne;
  propulsionUnitSpeed = other47.propulsionUnitSpeed;
  platformCourseAngle = other47.platformCourseAngle;
  altitudeAgl = other47.altitudeAgl;
  radarAltimeter = other47.radarAltimeter;
  controlCommand = other47.controlCommand;
  controlCommandVerificationList = other47.controlCommandVerificationList;
  sensorAzimuthRate = other47.sensorAzimuthRate;
  sensorElevationRate = other47.sensorElevationRate;
  sensorRollRate = other47.sensorRollRate;
  onBoardMiStoragePercentFull = other47.onBoardMiStoragePercentFull;
  activeWavelengthList = other47.activeWavelengthList;
  countryCodes = other47.countryCodes;
  numberOfNavsatsInView = other47.numberOfNavsatsInView;
  positioningMethodSource = other47.positioningMethodSource;
  platformStatus = other47.platformStatus;
  sensorControlMode = other47.sensorControlMode;
  sensorFrameRatePack = other47.sensorFrameRatePack;
  wavelengthsList = other47.wavelengthsList;
  targetId = other47.targetId;
  airbaseLocations = other47.airbaseLocations;
  takeOffTime = other47.takeOffTime;
  transmissionFrequency = other47.transmissionFrequency;
  onBoardMiStorageCapacity = other47.onBoardMiStorageCapacity;
  zoomPercentage = other47.zoomPercentage;
  communicationsMethod = other47.communicationsMethod;
  leapSeconds = other47.leapSeconds;
  correctionOffset = other47.correctionOffset;
  payloadList = other47.payloadList;
  activePayloads = other47.activePayloads;
  weaponStores = other47.weaponStores;
  waypointList = other47.waypointList;
  __isset = other47.__isset;
}
UasDataLinkLocalSet& UasDataLinkLocalSet::operator=(const UasDataLinkLocalSet& other48) {
  checksum = other48.checksum;
  precisionTimeStamp = other48.precisionTimeStamp;
  missionId = other48.missionId;
  platformTailNumber = other48.platformTailNumber;
  platformHeadingAngle = other48.platformHeadingAngle;
  platformPitchAngle = other48.platformPitchAngle;
  platformRollAngle = other48.platformRollAngle;
  platformTrueAirspeed = other48.platformTrueAirspeed;
  platformIndicatedAirspeed = other48.platformIndicatedAirspeed;
  platformDesignation = other48.platformDesignation;
  imageSensorSource = other48.imageSensorSource;
  imageCoordinateSystem = other48.imageCoordinateSystem;
  sensorLattitude = other48.sensorLattitude;
  sensorLongitude = other48.sensorLongitude;
  sensorTrueAltitude = other48.sensorTrueAltitude;
  sensorHorizontalFieldOfView = other48.sensorHorizontalFieldOfView;
  sensorVerticalFieldOfView = other48.sensorVerticalFieldOfView;
  sensorRelativeAzimuthAngle = other48.sensorRelativeAzimuthAngle;
  sensorRelativeElevationAngle = other48.sensorRelativeElevationAngle;
  sensorRelativeRollAngle = other48.sensorRelativeRollAngle;
  slantRange = other48.slantRange;
  targetWidth = other48.targetWidth;
  frameCenterLatitude = other48.frameCenterLatitude;
  frameCenterLongitude = other48.frameCenterLongitude;
  frameCenterElevation = other48.frameCenterElevation;
  offsetCornerLatitudePoint1 = other48.offsetCornerLatitudePoint1;
  offsetCornerLongitudePoint1 = other48.offsetCornerLongitudePoint1;
  offsetCornerLatitudePoint2 = other48.offsetCornerLatitudePoint2;
  offsetCornerLongitudePoint2 = other48.offsetCornerLongitudePoint2;
  offsetCornerLatitudePoint3 = other48.offsetCornerLatitudePoint3;
  offsetCornerLongitudePoint3 = other48.offsetCornerLongitudePoint3;
  offsetCornerLatitudePoint4 = other48.offsetCornerLatitudePoint4;
  offsetCornerLongitudePoint4 = other48.offsetCornerLongitudePoint4;
  icingDetected = other48.icingDetected;
  windDirection = other48.windDirection;
  windSpeed = other48.windSpeed;
  staticPressure = other48.staticPressure;
  densityAltitude = other48.densityAltitude;
  outsideAirTemperature = other48.outsideAirTemperature;
  targetLocationLatitude = other48.targetLocationLatitude;
  targetLocationLongitude = other48.targetLocationLongitude;
  targetLocationElevation = other48.targetLocationElevation;
  targetTrackGateWidth = other48.targetTrackGateWidth;
  targetTrackGateHeight = other48.targetTrackGateHeight;
  targetErrorEstimateCe90 = other48.targetErrorEstimateCe90;
  targetErrorEstimateLe90 = other48.targetErrorEstimateLe90;
  genericFlagData = other48.genericFlagData;
  securityLocalSet = other48.securityLocalSet;
  differentialPressure = other48.differentialPressure;
  platformAngleOfAttack = other48.platformAngleOfAttack;
  platformVerticalSpeed = other48.platformVerticalSpeed;
  platformSideslipAngle = other48.platformSideslipAngle;
  airfieldBarometricPressure = other48.airfieldBarometricPressure;
  airfieldElevation = other48.airfieldElevation;
  relativeHumidity = other48.relativeHumidity;
  platformGroundSpeed = other48.platformGroundSpeed;
  groundRange = other48.groundRange;
  platformFuelRemaining = other48.platformFuelRemaining;
  platformCallSign = other48.platformCallSign;
  weaponLoad = other48.weaponLoad;
  weaponFired = other48.weaponFired;
  laserPrfCode = other48.laserPrfCode;
  sensorFieldOfViewName = other48.sensorFieldOfViewName;
  platformMagneticHeading = other48.platformMagneticHeading;
  uasDatalinkLsVersionNumber = other48.uasDatalinkLsVersionNumber;
  invalid = other48.invalid;
  alternatePlatformLatitude = other48.alternatePlatformLatitude;
  alternatePlatformLongitude = other48.alternatePlatformLongitude;
  alternatePlatformAltitude = other48.alternatePlatformAltitude;
  alternatePlatformName = other48.alternatePlatformName;
  alternatePlatformHeading = other48.alternatePlatformHeading;
  eventStartTimeUtc = other48.eventStartTimeUtc;
  rvtLocalSet = other48.rvtLocalSet;
  vmtiLocalSet = other48.vmtiLocalSet;
  sensorEllipsoidHeight = other48.sensorEllipsoidHeight;
  alternatePlatformEllipsoidHeight = other48.alternatePlatformEllipsoidHeight;
  operationalMode = other48.operationalMode;
  frameCenterHeightAboveEllipsoid = other48.frameCenterHeightAboveEllipsoid;
  sensorNorthVelocity = other48.sensorNorthVelocity;
  sensorEastVelocity = other48.sensorEastVelocity;
  imageHorizonPixelPack = other48.imageHorizonPixelPack;
  cornerLatitudePoint1_Full = other48.cornerLatitudePoint1_Full;
  cornerLongitudePoint1_Full = other48.cornerLongitudePoint1_Full;
  cornerLatitudePoint2_Full = other48.cornerLatitudePoint2_Full;
  cornerLongitudePoint2_Full = other48.cornerLongitudePoint2_Full;
  cornerLatitudePoint3_Full = other48.cornerLatitudePoint3_Full;
  cornerLongitudePoint3_Full = other48.cornerLongitudePoint3_Full;
  cornerLatitudePoint4_Full = other48.cornerLatitudePoint4_Full;
  cornerLongitudePoint4_Full = other48.cornerLongitudePoint4_Full;
  platformPitchAngleFull = other48.platformPitchAngleFull;
  platformRollAngleFull = other48.platformRollAngleFull;
  platformAngleOfAttackFull = other48.platformAngleOfAttackFull;
  platformSideslipAngleFull = other48.platformSideslipAngleFull;
  miisCoreIdentifier = other48.miisCoreIdentifier;
  sarMotionImageryLocalSet = other48.sarMotionImageryLocalSet;
  targetWidthExtended = other48.targetWidthExtended;
  rangeImageLocalSet = other48.rangeImageLocalSet;
  geoRegistrationLocalSet = other48.geoRegistrationLocalSet;
  compositeImagingLocalSet = other48.compositeImagingLocalSet;
  segmentLocalSet = other48.segmentLocalSet;
  amendLocalSet = other48.amendLocalSet;
  sdccFlp = other48.sdccFlp;
  densityAltitudeExtended = other48.densityAltitudeExtended;
  sensorEllipsoidHeightExtended = other48.sensorEllipsoidHeightExtended;
  alternatePlatformEllipsoidHeightExtended = other48.alternatePlatformEllipsoidHeightExtended;
  streamDesignator = other48.streamDesignator;
  operationalBase = other48.operationalBase;
  broadcastSource = other48.broadcastSource;
  rangeToRecoveryLocation = other48.rangeToRecoveryLocation;
  timeAirborne = other48.timeAirborne;
  propulsionUnitSpeed = other48.propulsionUnitSpeed;
  platformCourseAngle = other48.platformCourseAngle;
  altitudeAgl = other48.altitudeAgl;
  radarAltimeter = other48.radarAltimeter;
  controlCommand = other48.controlCommand;
  controlCommandVerificationList = other48.controlCommandVerificationList;
  sensorAzimuthRate = other48.sensorAzimuthRate;
  sensorElevationRate = other48.sensorElevationRate;
  sensorRollRate = other48.sensorRollRate;
  onBoardMiStoragePercentFull = other48.onBoardMiStoragePercentFull;
  activeWavelengthList = other48.activeWavelengthList;
  countryCodes = other48.countryCodes;
  numberOfNavsatsInView = other48.numberOfNavsatsInView;
  positioningMethodSource = other48.positioningMethodSource;
  platformStatus = other48.platformStatus;
  sensorControlMode = other48.sensorControlMode;
  sensorFrameRatePack = other48.sensorFrameRatePack;
  wavelengthsList = other48.wavelengthsList;
  targetId = other48.targetId;
  airbaseLocations = other48.airbaseLocations;
  takeOffTime = other48.takeOffTime;
  transmissionFrequency = other48.transmissionFrequency;
  onBoardMiStorageCapacity = other48.onBoardMiStorageCapacity;
  zoomPercentage = other48.zoomPercentage;
  communicationsMethod = other48.communicationsMethod;
  leapSeconds = other48.leapSeconds;
  correctionOffset = other48.correctionOffset;
  payloadList = other48.payloadList;
  activePayloads = other48.activePayloads;
  weaponStores = other48.weaponStores;
  waypointList = other48.waypointList;
  __isset = other48.__isset;
  return *this;
}
void UasDataLinkLocalSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UasDataLinkLocalSet(";
  out << "checksum=" << to_string(checksum);
  out << ", " << "precisionTimeStamp=" << to_string(precisionTimeStamp);
  out << ", " << "missionId="; (__isset.missionId ? (out << to_string(missionId)) : (out << "<null>"));
  out << ", " << "platformTailNumber="; (__isset.platformTailNumber ? (out << to_string(platformTailNumber)) : (out << "<null>"));
  out << ", " << "platformHeadingAngle="; (__isset.platformHeadingAngle ? (out << to_string(platformHeadingAngle)) : (out << "<null>"));
  out << ", " << "platformPitchAngle="; (__isset.platformPitchAngle ? (out << to_string(platformPitchAngle)) : (out << "<null>"));
  out << ", " << "platformRollAngle="; (__isset.platformRollAngle ? (out << to_string(platformRollAngle)) : (out << "<null>"));
  out << ", " << "platformTrueAirspeed="; (__isset.platformTrueAirspeed ? (out << to_string(platformTrueAirspeed)) : (out << "<null>"));
  out << ", " << "platformIndicatedAirspeed="; (__isset.platformIndicatedAirspeed ? (out << to_string(platformIndicatedAirspeed)) : (out << "<null>"));
  out << ", " << "platformDesignation="; (__isset.platformDesignation ? (out << to_string(platformDesignation)) : (out << "<null>"));
  out << ", " << "imageSensorSource="; (__isset.imageSensorSource ? (out << to_string(imageSensorSource)) : (out << "<null>"));
  out << ", " << "imageCoordinateSystem="; (__isset.imageCoordinateSystem ? (out << to_string(imageCoordinateSystem)) : (out << "<null>"));
  out << ", " << "sensorLattitude="; (__isset.sensorLattitude ? (out << to_string(sensorLattitude)) : (out << "<null>"));
  out << ", " << "sensorLongitude="; (__isset.sensorLongitude ? (out << to_string(sensorLongitude)) : (out << "<null>"));
  out << ", " << "sensorTrueAltitude="; (__isset.sensorTrueAltitude ? (out << to_string(sensorTrueAltitude)) : (out << "<null>"));
  out << ", " << "sensorHorizontalFieldOfView="; (__isset.sensorHorizontalFieldOfView ? (out << to_string(sensorHorizontalFieldOfView)) : (out << "<null>"));
  out << ", " << "sensorVerticalFieldOfView="; (__isset.sensorVerticalFieldOfView ? (out << to_string(sensorVerticalFieldOfView)) : (out << "<null>"));
  out << ", " << "sensorRelativeAzimuthAngle="; (__isset.sensorRelativeAzimuthAngle ? (out << to_string(sensorRelativeAzimuthAngle)) : (out << "<null>"));
  out << ", " << "sensorRelativeElevationAngle="; (__isset.sensorRelativeElevationAngle ? (out << to_string(sensorRelativeElevationAngle)) : (out << "<null>"));
  out << ", " << "sensorRelativeRollAngle="; (__isset.sensorRelativeRollAngle ? (out << to_string(sensorRelativeRollAngle)) : (out << "<null>"));
  out << ", " << "slantRange="; (__isset.slantRange ? (out << to_string(slantRange)) : (out << "<null>"));
  out << ", " << "targetWidth="; (__isset.targetWidth ? (out << to_string(targetWidth)) : (out << "<null>"));
  out << ", " << "frameCenterLatitude="; (__isset.frameCenterLatitude ? (out << to_string(frameCenterLatitude)) : (out << "<null>"));
  out << ", " << "frameCenterLongitude="; (__isset.frameCenterLongitude ? (out << to_string(frameCenterLongitude)) : (out << "<null>"));
  out << ", " << "frameCenterElevation="; (__isset.frameCenterElevation ? (out << to_string(frameCenterElevation)) : (out << "<null>"));
  out << ", " << "offsetCornerLatitudePoint1="; (__isset.offsetCornerLatitudePoint1 ? (out << to_string(offsetCornerLatitudePoint1)) : (out << "<null>"));
  out << ", " << "offsetCornerLongitudePoint1="; (__isset.offsetCornerLongitudePoint1 ? (out << to_string(offsetCornerLongitudePoint1)) : (out << "<null>"));
  out << ", " << "offsetCornerLatitudePoint2="; (__isset.offsetCornerLatitudePoint2 ? (out << to_string(offsetCornerLatitudePoint2)) : (out << "<null>"));
  out << ", " << "offsetCornerLongitudePoint2="; (__isset.offsetCornerLongitudePoint2 ? (out << to_string(offsetCornerLongitudePoint2)) : (out << "<null>"));
  out << ", " << "offsetCornerLatitudePoint3="; (__isset.offsetCornerLatitudePoint3 ? (out << to_string(offsetCornerLatitudePoint3)) : (out << "<null>"));
  out << ", " << "offsetCornerLongitudePoint3="; (__isset.offsetCornerLongitudePoint3 ? (out << to_string(offsetCornerLongitudePoint3)) : (out << "<null>"));
  out << ", " << "offsetCornerLatitudePoint4="; (__isset.offsetCornerLatitudePoint4 ? (out << to_string(offsetCornerLatitudePoint4)) : (out << "<null>"));
  out << ", " << "offsetCornerLongitudePoint4="; (__isset.offsetCornerLongitudePoint4 ? (out << to_string(offsetCornerLongitudePoint4)) : (out << "<null>"));
  out << ", " << "icingDetected="; (__isset.icingDetected ? (out << to_string(icingDetected)) : (out << "<null>"));
  out << ", " << "windDirection="; (__isset.windDirection ? (out << to_string(windDirection)) : (out << "<null>"));
  out << ", " << "windSpeed="; (__isset.windSpeed ? (out << to_string(windSpeed)) : (out << "<null>"));
  out << ", " << "staticPressure="; (__isset.staticPressure ? (out << to_string(staticPressure)) : (out << "<null>"));
  out << ", " << "densityAltitude="; (__isset.densityAltitude ? (out << to_string(densityAltitude)) : (out << "<null>"));
  out << ", " << "outsideAirTemperature="; (__isset.outsideAirTemperature ? (out << to_string(outsideAirTemperature)) : (out << "<null>"));
  out << ", " << "targetLocationLatitude="; (__isset.targetLocationLatitude ? (out << to_string(targetLocationLatitude)) : (out << "<null>"));
  out << ", " << "targetLocationLongitude="; (__isset.targetLocationLongitude ? (out << to_string(targetLocationLongitude)) : (out << "<null>"));
  out << ", " << "targetLocationElevation="; (__isset.targetLocationElevation ? (out << to_string(targetLocationElevation)) : (out << "<null>"));
  out << ", " << "targetTrackGateWidth="; (__isset.targetTrackGateWidth ? (out << to_string(targetTrackGateWidth)) : (out << "<null>"));
  out << ", " << "targetTrackGateHeight="; (__isset.targetTrackGateHeight ? (out << to_string(targetTrackGateHeight)) : (out << "<null>"));
  out << ", " << "targetErrorEstimateCe90="; (__isset.targetErrorEstimateCe90 ? (out << to_string(targetErrorEstimateCe90)) : (out << "<null>"));
  out << ", " << "targetErrorEstimateLe90="; (__isset.targetErrorEstimateLe90 ? (out << to_string(targetErrorEstimateLe90)) : (out << "<null>"));
  out << ", " << "genericFlagData="; (__isset.genericFlagData ? (out << to_string(genericFlagData)) : (out << "<null>"));
  out << ", " << "securityLocalSet="; (__isset.securityLocalSet ? (out << to_string(securityLocalSet)) : (out << "<null>"));
  out << ", " << "differentialPressure="; (__isset.differentialPressure ? (out << to_string(differentialPressure)) : (out << "<null>"));
  out << ", " << "platformAngleOfAttack="; (__isset.platformAngleOfAttack ? (out << to_string(platformAngleOfAttack)) : (out << "<null>"));
  out << ", " << "platformVerticalSpeed="; (__isset.platformVerticalSpeed ? (out << to_string(platformVerticalSpeed)) : (out << "<null>"));
  out << ", " << "platformSideslipAngle="; (__isset.platformSideslipAngle ? (out << to_string(platformSideslipAngle)) : (out << "<null>"));
  out << ", " << "airfieldBarometricPressure="; (__isset.airfieldBarometricPressure ? (out << to_string(airfieldBarometricPressure)) : (out << "<null>"));
  out << ", " << "airfieldElevation="; (__isset.airfieldElevation ? (out << to_string(airfieldElevation)) : (out << "<null>"));
  out << ", " << "relativeHumidity="; (__isset.relativeHumidity ? (out << to_string(relativeHumidity)) : (out << "<null>"));
  out << ", " << "platformGroundSpeed="; (__isset.platformGroundSpeed ? (out << to_string(platformGroundSpeed)) : (out << "<null>"));
  out << ", " << "groundRange="; (__isset.groundRange ? (out << to_string(groundRange)) : (out << "<null>"));
  out << ", " << "platformFuelRemaining="; (__isset.platformFuelRemaining ? (out << to_string(platformFuelRemaining)) : (out << "<null>"));
  out << ", " << "platformCallSign="; (__isset.platformCallSign ? (out << to_string(platformCallSign)) : (out << "<null>"));
  out << ", " << "weaponLoad="; (__isset.weaponLoad ? (out << to_string(weaponLoad)) : (out << "<null>"));
  out << ", " << "weaponFired="; (__isset.weaponFired ? (out << to_string(weaponFired)) : (out << "<null>"));
  out << ", " << "laserPrfCode="; (__isset.laserPrfCode ? (out << to_string(laserPrfCode)) : (out << "<null>"));
  out << ", " << "sensorFieldOfViewName="; (__isset.sensorFieldOfViewName ? (out << to_string(sensorFieldOfViewName)) : (out << "<null>"));
  out << ", " << "platformMagneticHeading="; (__isset.platformMagneticHeading ? (out << to_string(platformMagneticHeading)) : (out << "<null>"));
  out << ", " << "uasDatalinkLsVersionNumber=" << to_string(uasDatalinkLsVersionNumber);
  out << ", " << "invalid="; (__isset.invalid ? (out << to_string(invalid)) : (out << "<null>"));
  out << ", " << "alternatePlatformLatitude="; (__isset.alternatePlatformLatitude ? (out << to_string(alternatePlatformLatitude)) : (out << "<null>"));
  out << ", " << "alternatePlatformLongitude="; (__isset.alternatePlatformLongitude ? (out << to_string(alternatePlatformLongitude)) : (out << "<null>"));
  out << ", " << "alternatePlatformAltitude="; (__isset.alternatePlatformAltitude ? (out << to_string(alternatePlatformAltitude)) : (out << "<null>"));
  out << ", " << "alternatePlatformName="; (__isset.alternatePlatformName ? (out << to_string(alternatePlatformName)) : (out << "<null>"));
  out << ", " << "alternatePlatformHeading="; (__isset.alternatePlatformHeading ? (out << to_string(alternatePlatformHeading)) : (out << "<null>"));
  out << ", " << "eventStartTimeUtc="; (__isset.eventStartTimeUtc ? (out << to_string(eventStartTimeUtc)) : (out << "<null>"));
  out << ", " << "rvtLocalSet="; (__isset.rvtLocalSet ? (out << to_string(rvtLocalSet)) : (out << "<null>"));
  out << ", " << "vmtiLocalSet="; (__isset.vmtiLocalSet ? (out << to_string(vmtiLocalSet)) : (out << "<null>"));
  out << ", " << "sensorEllipsoidHeight="; (__isset.sensorEllipsoidHeight ? (out << to_string(sensorEllipsoidHeight)) : (out << "<null>"));
  out << ", " << "alternatePlatformEllipsoidHeight="; (__isset.alternatePlatformEllipsoidHeight ? (out << to_string(alternatePlatformEllipsoidHeight)) : (out << "<null>"));
  out << ", " << "operationalMode="; (__isset.operationalMode ? (out << to_string(operationalMode)) : (out << "<null>"));
  out << ", " << "frameCenterHeightAboveEllipsoid="; (__isset.frameCenterHeightAboveEllipsoid ? (out << to_string(frameCenterHeightAboveEllipsoid)) : (out << "<null>"));
  out << ", " << "sensorNorthVelocity="; (__isset.sensorNorthVelocity ? (out << to_string(sensorNorthVelocity)) : (out << "<null>"));
  out << ", " << "sensorEastVelocity="; (__isset.sensorEastVelocity ? (out << to_string(sensorEastVelocity)) : (out << "<null>"));
  out << ", " << "imageHorizonPixelPack="; (__isset.imageHorizonPixelPack ? (out << to_string(imageHorizonPixelPack)) : (out << "<null>"));
  out << ", " << "cornerLatitudePoint1_Full="; (__isset.cornerLatitudePoint1_Full ? (out << to_string(cornerLatitudePoint1_Full)) : (out << "<null>"));
  out << ", " << "cornerLongitudePoint1_Full="; (__isset.cornerLongitudePoint1_Full ? (out << to_string(cornerLongitudePoint1_Full)) : (out << "<null>"));
  out << ", " << "cornerLatitudePoint2_Full="; (__isset.cornerLatitudePoint2_Full ? (out << to_string(cornerLatitudePoint2_Full)) : (out << "<null>"));
  out << ", " << "cornerLongitudePoint2_Full="; (__isset.cornerLongitudePoint2_Full ? (out << to_string(cornerLongitudePoint2_Full)) : (out << "<null>"));
  out << ", " << "cornerLatitudePoint3_Full="; (__isset.cornerLatitudePoint3_Full ? (out << to_string(cornerLatitudePoint3_Full)) : (out << "<null>"));
  out << ", " << "cornerLongitudePoint3_Full="; (__isset.cornerLongitudePoint3_Full ? (out << to_string(cornerLongitudePoint3_Full)) : (out << "<null>"));
  out << ", " << "cornerLatitudePoint4_Full="; (__isset.cornerLatitudePoint4_Full ? (out << to_string(cornerLatitudePoint4_Full)) : (out << "<null>"));
  out << ", " << "cornerLongitudePoint4_Full="; (__isset.cornerLongitudePoint4_Full ? (out << to_string(cornerLongitudePoint4_Full)) : (out << "<null>"));
  out << ", " << "platformPitchAngleFull="; (__isset.platformPitchAngleFull ? (out << to_string(platformPitchAngleFull)) : (out << "<null>"));
  out << ", " << "platformRollAngleFull="; (__isset.platformRollAngleFull ? (out << to_string(platformRollAngleFull)) : (out << "<null>"));
  out << ", " << "platformAngleOfAttackFull="; (__isset.platformAngleOfAttackFull ? (out << to_string(platformAngleOfAttackFull)) : (out << "<null>"));
  out << ", " << "platformSideslipAngleFull="; (__isset.platformSideslipAngleFull ? (out << to_string(platformSideslipAngleFull)) : (out << "<null>"));
  out << ", " << "miisCoreIdentifier="; (__isset.miisCoreIdentifier ? (out << to_string(miisCoreIdentifier)) : (out << "<null>"));
  out << ", " << "sarMotionImageryLocalSet="; (__isset.sarMotionImageryLocalSet ? (out << to_string(sarMotionImageryLocalSet)) : (out << "<null>"));
  out << ", " << "targetWidthExtended="; (__isset.targetWidthExtended ? (out << to_string(targetWidthExtended)) : (out << "<null>"));
  out << ", " << "rangeImageLocalSet="; (__isset.rangeImageLocalSet ? (out << to_string(rangeImageLocalSet)) : (out << "<null>"));
  out << ", " << "geoRegistrationLocalSet="; (__isset.geoRegistrationLocalSet ? (out << to_string(geoRegistrationLocalSet)) : (out << "<null>"));
  out << ", " << "compositeImagingLocalSet="; (__isset.compositeImagingLocalSet ? (out << to_string(compositeImagingLocalSet)) : (out << "<null>"));
  out << ", " << "segmentLocalSet="; (__isset.segmentLocalSet ? (out << to_string(segmentLocalSet)) : (out << "<null>"));
  out << ", " << "amendLocalSet="; (__isset.amendLocalSet ? (out << to_string(amendLocalSet)) : (out << "<null>"));
  out << ", " << "sdccFlp="; (__isset.sdccFlp ? (out << to_string(sdccFlp)) : (out << "<null>"));
  out << ", " << "densityAltitudeExtended="; (__isset.densityAltitudeExtended ? (out << to_string(densityAltitudeExtended)) : (out << "<null>"));
  out << ", " << "sensorEllipsoidHeightExtended="; (__isset.sensorEllipsoidHeightExtended ? (out << to_string(sensorEllipsoidHeightExtended)) : (out << "<null>"));
  out << ", " << "alternatePlatformEllipsoidHeightExtended="; (__isset.alternatePlatformEllipsoidHeightExtended ? (out << to_string(alternatePlatformEllipsoidHeightExtended)) : (out << "<null>"));
  out << ", " << "streamDesignator="; (__isset.streamDesignator ? (out << to_string(streamDesignator)) : (out << "<null>"));
  out << ", " << "operationalBase="; (__isset.operationalBase ? (out << to_string(operationalBase)) : (out << "<null>"));
  out << ", " << "broadcastSource="; (__isset.broadcastSource ? (out << to_string(broadcastSource)) : (out << "<null>"));
  out << ", " << "rangeToRecoveryLocation="; (__isset.rangeToRecoveryLocation ? (out << to_string(rangeToRecoveryLocation)) : (out << "<null>"));
  out << ", " << "timeAirborne="; (__isset.timeAirborne ? (out << to_string(timeAirborne)) : (out << "<null>"));
  out << ", " << "propulsionUnitSpeed="; (__isset.propulsionUnitSpeed ? (out << to_string(propulsionUnitSpeed)) : (out << "<null>"));
  out << ", " << "platformCourseAngle="; (__isset.platformCourseAngle ? (out << to_string(platformCourseAngle)) : (out << "<null>"));
  out << ", " << "altitudeAgl="; (__isset.altitudeAgl ? (out << to_string(altitudeAgl)) : (out << "<null>"));
  out << ", " << "radarAltimeter="; (__isset.radarAltimeter ? (out << to_string(radarAltimeter)) : (out << "<null>"));
  out << ", " << "controlCommand="; (__isset.controlCommand ? (out << to_string(controlCommand)) : (out << "<null>"));
  out << ", " << "controlCommandVerificationList="; (__isset.controlCommandVerificationList ? (out << to_string(controlCommandVerificationList)) : (out << "<null>"));
  out << ", " << "sensorAzimuthRate="; (__isset.sensorAzimuthRate ? (out << to_string(sensorAzimuthRate)) : (out << "<null>"));
  out << ", " << "sensorElevationRate="; (__isset.sensorElevationRate ? (out << to_string(sensorElevationRate)) : (out << "<null>"));
  out << ", " << "sensorRollRate="; (__isset.sensorRollRate ? (out << to_string(sensorRollRate)) : (out << "<null>"));
  out << ", " << "onBoardMiStoragePercentFull="; (__isset.onBoardMiStoragePercentFull ? (out << to_string(onBoardMiStoragePercentFull)) : (out << "<null>"));
  out << ", " << "activeWavelengthList="; (__isset.activeWavelengthList ? (out << to_string(activeWavelengthList)) : (out << "<null>"));
  out << ", " << "countryCodes="; (__isset.countryCodes ? (out << to_string(countryCodes)) : (out << "<null>"));
  out << ", " << "numberOfNavsatsInView="; (__isset.numberOfNavsatsInView ? (out << to_string(numberOfNavsatsInView)) : (out << "<null>"));
  out << ", " << "positioningMethodSource="; (__isset.positioningMethodSource ? (out << to_string(positioningMethodSource)) : (out << "<null>"));
  out << ", " << "platformStatus="; (__isset.platformStatus ? (out << to_string(platformStatus)) : (out << "<null>"));
  out << ", " << "sensorControlMode="; (__isset.sensorControlMode ? (out << to_string(sensorControlMode)) : (out << "<null>"));
  out << ", " << "sensorFrameRatePack="; (__isset.sensorFrameRatePack ? (out << to_string(sensorFrameRatePack)) : (out << "<null>"));
  out << ", " << "wavelengthsList="; (__isset.wavelengthsList ? (out << to_string(wavelengthsList)) : (out << "<null>"));
  out << ", " << "targetId="; (__isset.targetId ? (out << to_string(targetId)) : (out << "<null>"));
  out << ", " << "airbaseLocations="; (__isset.airbaseLocations ? (out << to_string(airbaseLocations)) : (out << "<null>"));
  out << ", " << "takeOffTime="; (__isset.takeOffTime ? (out << to_string(takeOffTime)) : (out << "<null>"));
  out << ", " << "transmissionFrequency="; (__isset.transmissionFrequency ? (out << to_string(transmissionFrequency)) : (out << "<null>"));
  out << ", " << "onBoardMiStorageCapacity="; (__isset.onBoardMiStorageCapacity ? (out << to_string(onBoardMiStorageCapacity)) : (out << "<null>"));
  out << ", " << "zoomPercentage="; (__isset.zoomPercentage ? (out << to_string(zoomPercentage)) : (out << "<null>"));
  out << ", " << "communicationsMethod="; (__isset.communicationsMethod ? (out << to_string(communicationsMethod)) : (out << "<null>"));
  out << ", " << "leapSeconds="; (__isset.leapSeconds ? (out << to_string(leapSeconds)) : (out << "<null>"));
  out << ", " << "correctionOffset="; (__isset.correctionOffset ? (out << to_string(correctionOffset)) : (out << "<null>"));
  out << ", " << "payloadList="; (__isset.payloadList ? (out << to_string(payloadList)) : (out << "<null>"));
  out << ", " << "activePayloads="; (__isset.activePayloads ? (out << to_string(activePayloads)) : (out << "<null>"));
  out << ", " << "weaponStores="; (__isset.weaponStores ? (out << to_string(weaponStores)) : (out << "<null>"));
  out << ", " << "waypointList="; (__isset.waypointList ? (out << to_string(waypointList)) : (out << "<null>"));
  out << ")";
}

}} // namespace
