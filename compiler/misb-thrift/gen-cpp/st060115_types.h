/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef st060115_TYPES_H
#define st060115_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace org { namespace misb {

struct GenericFlagData {
  enum type {
    LASER_OFF = 1,
    AUTO_TRACK_OFF = 2,
    IR_POLARITY_WHITE_HOT = 4,
    ICING_STATUS_NONE = 8,
    SLANT_RANGE_CALCULATED = 16,
    IMAGE_VALID = 32
  };
};

extern const std::map<int, const char*> _GenericFlagData_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GenericFlagData::type& val);

std::string to_string(const GenericFlagData::type& val);

struct SensorFieldOfViewName {
  enum type {
    ULTRANARROW = 0,
    NARROW = 1,
    MEDIUM = 2,
    WIDE = 3,
    ULTRAWIDE = 4,
    NARROW_MEDIUM = 5,
    ULTRANARROW_2X = 6,
    ULTRANARROW_4X = 7
  };
};

extern const std::map<int, const char*> _SensorFieldOfViewName_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SensorFieldOfViewName::type& val);

std::string to_string(const SensorFieldOfViewName::type& val);

struct OperationalMode {
  enum type {
    OTHER = 0,
    OPERATIONAL = 1,
    TRAINING = 2,
    EXERCISE = 3,
    MAINTENANCE = 4,
    TEST = 5
  };
};

extern const std::map<int, const char*> _OperationalMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OperationalMode::type& val);

std::string to_string(const OperationalMode::type& val);

struct PlatformStatus {
  enum type {
    ACTIVE = 0,
    PRE_FLIGHT = 1,
    PRE_FLIGHT_TAXIING = 2,
    RUN_UP = 3,
    TAKE_OFF = 4,
    INGRESS = 5,
    MANUAL_OPERATION = 6,
    AUTOMATED_ORBIT = 7,
    TRANSITIONING = 8,
    EGRESS = 9,
    LANDING = 10,
    LANDED_TAXIING = 11,
    LANDED_PARKED = 12
  };
};

extern const std::map<int, const char*> _PlatformStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PlatformStatus::type& val);

std::string to_string(const PlatformStatus::type& val);

struct SensorControlMode {
  enum type {
    OFF = 0,
    HOME_POSITION = 1,
    UNCONTROLLED = 2,
    MANUAL_CONTROL = 3,
    CALIBRATING = 4,
    AUTO_HOLDING_POSITION = 5,
    AUTO_TRACKING = 6
  };
};

extern const std::map<int, const char*> _SensorControlMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SensorControlMode::type& val);

std::string to_string(const SensorControlMode::type& val);

class SecurityLocalSet;

class RvtLocalSet;

class VmtiLocalSet;

class ImageHorizontalPixelPack;

class SarMotionImageryLocalSet;

class RangeImageLocalSet;

class GeoRegistrationLocalSet;

class CompositeImagingLocalSet;

class SegmentLocalSet;

class AmendLocalSet;

class SdccFlp;

class ControlCommand;

class ControlCommandVerificationList;

class ActiveWavelengthList;

class CountryCodes;

class SensorFrameRatePack;

class WaveLengthList;

class AirbaseLocations;

class PayloadList;

class WeaponStores;

class WaypointList;

class UasDataLinkLocalSet;


class SecurityLocalSet : public virtual ::apache::thrift::TBase {
 public:

  SecurityLocalSet(const SecurityLocalSet&);
  SecurityLocalSet& operator=(const SecurityLocalSet&);
  SecurityLocalSet() {
  }

  virtual ~SecurityLocalSet() noexcept;

  bool operator == (const SecurityLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SecurityLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecurityLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SecurityLocalSet &a, SecurityLocalSet &b);

std::ostream& operator<<(std::ostream& out, const SecurityLocalSet& obj);


class RvtLocalSet : public virtual ::apache::thrift::TBase {
 public:

  RvtLocalSet(const RvtLocalSet&);
  RvtLocalSet& operator=(const RvtLocalSet&);
  RvtLocalSet() {
  }

  virtual ~RvtLocalSet() noexcept;

  bool operator == (const RvtLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RvtLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RvtLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RvtLocalSet &a, RvtLocalSet &b);

std::ostream& operator<<(std::ostream& out, const RvtLocalSet& obj);


class VmtiLocalSet : public virtual ::apache::thrift::TBase {
 public:

  VmtiLocalSet(const VmtiLocalSet&);
  VmtiLocalSet& operator=(const VmtiLocalSet&);
  VmtiLocalSet() {
  }

  virtual ~VmtiLocalSet() noexcept;

  bool operator == (const VmtiLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VmtiLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VmtiLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VmtiLocalSet &a, VmtiLocalSet &b);

std::ostream& operator<<(std::ostream& out, const VmtiLocalSet& obj);


class ImageHorizontalPixelPack : public virtual ::apache::thrift::TBase {
 public:

  ImageHorizontalPixelPack(const ImageHorizontalPixelPack&);
  ImageHorizontalPixelPack& operator=(const ImageHorizontalPixelPack&);
  ImageHorizontalPixelPack() {
  }

  virtual ~ImageHorizontalPixelPack() noexcept;

  bool operator == (const ImageHorizontalPixelPack & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageHorizontalPixelPack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageHorizontalPixelPack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ImageHorizontalPixelPack &a, ImageHorizontalPixelPack &b);

std::ostream& operator<<(std::ostream& out, const ImageHorizontalPixelPack& obj);


class SarMotionImageryLocalSet : public virtual ::apache::thrift::TBase {
 public:

  SarMotionImageryLocalSet(const SarMotionImageryLocalSet&);
  SarMotionImageryLocalSet& operator=(const SarMotionImageryLocalSet&);
  SarMotionImageryLocalSet() {
  }

  virtual ~SarMotionImageryLocalSet() noexcept;

  bool operator == (const SarMotionImageryLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SarMotionImageryLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SarMotionImageryLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SarMotionImageryLocalSet &a, SarMotionImageryLocalSet &b);

std::ostream& operator<<(std::ostream& out, const SarMotionImageryLocalSet& obj);


class RangeImageLocalSet : public virtual ::apache::thrift::TBase {
 public:

  RangeImageLocalSet(const RangeImageLocalSet&);
  RangeImageLocalSet& operator=(const RangeImageLocalSet&);
  RangeImageLocalSet() {
  }

  virtual ~RangeImageLocalSet() noexcept;

  bool operator == (const RangeImageLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RangeImageLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RangeImageLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RangeImageLocalSet &a, RangeImageLocalSet &b);

std::ostream& operator<<(std::ostream& out, const RangeImageLocalSet& obj);


class GeoRegistrationLocalSet : public virtual ::apache::thrift::TBase {
 public:

  GeoRegistrationLocalSet(const GeoRegistrationLocalSet&);
  GeoRegistrationLocalSet& operator=(const GeoRegistrationLocalSet&);
  GeoRegistrationLocalSet() {
  }

  virtual ~GeoRegistrationLocalSet() noexcept;

  bool operator == (const GeoRegistrationLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GeoRegistrationLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GeoRegistrationLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GeoRegistrationLocalSet &a, GeoRegistrationLocalSet &b);

std::ostream& operator<<(std::ostream& out, const GeoRegistrationLocalSet& obj);


class CompositeImagingLocalSet : public virtual ::apache::thrift::TBase {
 public:

  CompositeImagingLocalSet(const CompositeImagingLocalSet&);
  CompositeImagingLocalSet& operator=(const CompositeImagingLocalSet&);
  CompositeImagingLocalSet() {
  }

  virtual ~CompositeImagingLocalSet() noexcept;

  bool operator == (const CompositeImagingLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CompositeImagingLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompositeImagingLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompositeImagingLocalSet &a, CompositeImagingLocalSet &b);

std::ostream& operator<<(std::ostream& out, const CompositeImagingLocalSet& obj);


class SegmentLocalSet : public virtual ::apache::thrift::TBase {
 public:

  SegmentLocalSet(const SegmentLocalSet&);
  SegmentLocalSet& operator=(const SegmentLocalSet&);
  SegmentLocalSet() {
  }

  virtual ~SegmentLocalSet() noexcept;

  bool operator == (const SegmentLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SegmentLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SegmentLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SegmentLocalSet &a, SegmentLocalSet &b);

std::ostream& operator<<(std::ostream& out, const SegmentLocalSet& obj);


class AmendLocalSet : public virtual ::apache::thrift::TBase {
 public:

  AmendLocalSet(const AmendLocalSet&);
  AmendLocalSet& operator=(const AmendLocalSet&);
  AmendLocalSet() {
  }

  virtual ~AmendLocalSet() noexcept;

  bool operator == (const AmendLocalSet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AmendLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AmendLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AmendLocalSet &a, AmendLocalSet &b);

std::ostream& operator<<(std::ostream& out, const AmendLocalSet& obj);


class SdccFlp : public virtual ::apache::thrift::TBase {
 public:

  SdccFlp(const SdccFlp&);
  SdccFlp& operator=(const SdccFlp&);
  SdccFlp() {
  }

  virtual ~SdccFlp() noexcept;

  bool operator == (const SdccFlp & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SdccFlp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SdccFlp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SdccFlp &a, SdccFlp &b);

std::ostream& operator<<(std::ostream& out, const SdccFlp& obj);


class ControlCommand : public virtual ::apache::thrift::TBase {
 public:

  ControlCommand(const ControlCommand&);
  ControlCommand& operator=(const ControlCommand&);
  ControlCommand() {
  }

  virtual ~ControlCommand() noexcept;

  bool operator == (const ControlCommand & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ControlCommand &a, ControlCommand &b);

std::ostream& operator<<(std::ostream& out, const ControlCommand& obj);


class ControlCommandVerificationList : public virtual ::apache::thrift::TBase {
 public:

  ControlCommandVerificationList(const ControlCommandVerificationList&);
  ControlCommandVerificationList& operator=(const ControlCommandVerificationList&);
  ControlCommandVerificationList() {
  }

  virtual ~ControlCommandVerificationList() noexcept;

  bool operator == (const ControlCommandVerificationList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlCommandVerificationList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlCommandVerificationList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ControlCommandVerificationList &a, ControlCommandVerificationList &b);

std::ostream& operator<<(std::ostream& out, const ControlCommandVerificationList& obj);


class ActiveWavelengthList : public virtual ::apache::thrift::TBase {
 public:

  ActiveWavelengthList(const ActiveWavelengthList&);
  ActiveWavelengthList& operator=(const ActiveWavelengthList&);
  ActiveWavelengthList() {
  }

  virtual ~ActiveWavelengthList() noexcept;

  bool operator == (const ActiveWavelengthList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ActiveWavelengthList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ActiveWavelengthList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ActiveWavelengthList &a, ActiveWavelengthList &b);

std::ostream& operator<<(std::ostream& out, const ActiveWavelengthList& obj);


class CountryCodes : public virtual ::apache::thrift::TBase {
 public:

  CountryCodes(const CountryCodes&);
  CountryCodes& operator=(const CountryCodes&);
  CountryCodes() {
  }

  virtual ~CountryCodes() noexcept;

  bool operator == (const CountryCodes & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CountryCodes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CountryCodes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CountryCodes &a, CountryCodes &b);

std::ostream& operator<<(std::ostream& out, const CountryCodes& obj);


class SensorFrameRatePack : public virtual ::apache::thrift::TBase {
 public:

  SensorFrameRatePack(const SensorFrameRatePack&);
  SensorFrameRatePack& operator=(const SensorFrameRatePack&);
  SensorFrameRatePack() {
  }

  virtual ~SensorFrameRatePack() noexcept;

  bool operator == (const SensorFrameRatePack & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SensorFrameRatePack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SensorFrameRatePack & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SensorFrameRatePack &a, SensorFrameRatePack &b);

std::ostream& operator<<(std::ostream& out, const SensorFrameRatePack& obj);


class WaveLengthList : public virtual ::apache::thrift::TBase {
 public:

  WaveLengthList(const WaveLengthList&);
  WaveLengthList& operator=(const WaveLengthList&);
  WaveLengthList() {
  }

  virtual ~WaveLengthList() noexcept;

  bool operator == (const WaveLengthList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WaveLengthList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WaveLengthList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WaveLengthList &a, WaveLengthList &b);

std::ostream& operator<<(std::ostream& out, const WaveLengthList& obj);


class AirbaseLocations : public virtual ::apache::thrift::TBase {
 public:

  AirbaseLocations(const AirbaseLocations&);
  AirbaseLocations& operator=(const AirbaseLocations&);
  AirbaseLocations() {
  }

  virtual ~AirbaseLocations() noexcept;

  bool operator == (const AirbaseLocations & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AirbaseLocations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AirbaseLocations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AirbaseLocations &a, AirbaseLocations &b);

std::ostream& operator<<(std::ostream& out, const AirbaseLocations& obj);


class PayloadList : public virtual ::apache::thrift::TBase {
 public:

  PayloadList(const PayloadList&);
  PayloadList& operator=(const PayloadList&);
  PayloadList() {
  }

  virtual ~PayloadList() noexcept;

  bool operator == (const PayloadList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PayloadList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PayloadList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PayloadList &a, PayloadList &b);

std::ostream& operator<<(std::ostream& out, const PayloadList& obj);


class WeaponStores : public virtual ::apache::thrift::TBase {
 public:

  WeaponStores(const WeaponStores&);
  WeaponStores& operator=(const WeaponStores&);
  WeaponStores() {
  }

  virtual ~WeaponStores() noexcept;

  bool operator == (const WeaponStores & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WeaponStores &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WeaponStores & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WeaponStores &a, WeaponStores &b);

std::ostream& operator<<(std::ostream& out, const WeaponStores& obj);


class WaypointList : public virtual ::apache::thrift::TBase {
 public:

  WaypointList(const WaypointList&);
  WaypointList& operator=(const WaypointList&);
  WaypointList() {
  }

  virtual ~WaypointList() noexcept;

  bool operator == (const WaypointList & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WaypointList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WaypointList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WaypointList &a, WaypointList &b);

std::ostream& operator<<(std::ostream& out, const WaypointList& obj);

typedef struct _UasDataLinkLocalSet__isset {
  _UasDataLinkLocalSet__isset() : missionId(false), platformTailNumber(false), platformHeadingAngle(false), platformPitchAngle(false), platformRollAngle(false), platformTrueAirspeed(false), platformIndicatedAirspeed(false), platformDesignation(false), imageSensorSource(false), imageCoordinateSystem(false), sensorLattitude(false), sensorLongitude(false), sensorTrueAltitude(false), sensorHorizontalFieldOfView(false), sensorVerticalFieldOfView(false), sensorRelativeAzimuthAngle(false), sensorRelativeElevationAngle(false), sensorRelativeRollAngle(false), slantRange(false), targetWidth(false), frameCenterLatitude(false), frameCenterLongitude(false), frameCenterElevation(false), offsetCornerLatitudePoint1(false), offsetCornerLongitudePoint1(false), offsetCornerLatitudePoint2(false), offsetCornerLongitudePoint2(false), offsetCornerLatitudePoint3(false), offsetCornerLongitudePoint3(false), offsetCornerLatitudePoint4(false), offsetCornerLongitudePoint4(false), icingDetected(false), windDirection(false), windSpeed(false), staticPressure(false), densityAltitude(false), outsideAirTemperature(false), targetLocationLatitude(false), targetLocationLongitude(false), targetLocationElevation(false), targetTrackGateWidth(false), targetTrackGateHeight(false), targetErrorEstimateCe90(false), targetErrorEstimateLe90(false), genericFlagData(false), securityLocalSet(false), differentialPressure(false), platformAngleOfAttack(false), platformVerticalSpeed(false), platformSideslipAngle(false), airfieldBarometricPressure(false), airfieldElevation(false), relativeHumidity(false), platformGroundSpeed(false), groundRange(false), platformFuelRemaining(false), platformCallSign(false), weaponLoad(false), weaponFired(false), laserPrfCode(false), sensorFieldOfViewName(false), platformMagneticHeading(false), invalid(false), alternatePlatformLatitude(false), alternatePlatformLongitude(false), alternatePlatformAltitude(false), alternatePlatformName(false), alternatePlatformHeading(false), eventStartTimeUtc(false), rvtLocalSet(false), vmtiLocalSet(false), sensorEllipsoidHeight(false), alternatePlatformEllipsoidHeight(false), operationalMode(false), frameCenterHeightAboveEllipsoid(false), sensorNorthVelocity(false), sensorEastVelocity(false), imageHorizonPixelPack(false), cornerLatitudePoint1_Full(false), cornerLongitudePoint1_Full(false), cornerLatitudePoint2_Full(false), cornerLongitudePoint2_Full(false), cornerLatitudePoint3_Full(false), cornerLongitudePoint3_Full(false), cornerLatitudePoint4_Full(false), cornerLongitudePoint4_Full(false), platformPitchAngleFull(false), platformRollAngleFull(false), platformAngleOfAttackFull(false), platformSideslipAngleFull(false), miisCoreIdentifier(false), sarMotionImageryLocalSet(false), targetWidthExtended(false), rangeImageLocalSet(false), geoRegistrationLocalSet(false), compositeImagingLocalSet(false), segmentLocalSet(false), amendLocalSet(false), sdccFlp(false), densityAltitudeExtended(false), sensorEllipsoidHeightExtended(false), alternatePlatformEllipsoidHeightExtended(false), streamDesignator(false), operationalBase(false), broadcastSource(false), rangeToRecoveryLocation(false), timeAirborne(false), propulsionUnitSpeed(false), platformCourseAngle(false), altitudeAgl(false), radarAltimeter(false), controlCommand(false), controlCommandVerificationList(false), sensorAzimuthRate(false), sensorElevationRate(false), sensorRollRate(false), onBoardMiStoragePercentFull(false), activeWavelengthList(false), countryCodes(false), numberOfNavsatsInView(false), positioningMethodSource(false), platformStatus(false), sensorControlMode(false), sensorFrameRatePack(false), wavelengthsList(false), targetId(false), airbaseLocations(false), takeOffTime(false), transmissionFrequency(false), onBoardMiStorageCapacity(false), zoomPercentage(false), communicationsMethod(false), leapSeconds(false), correctionOffset(false), payloadList(false), activePayloads(false), weaponStores(false), waypointList(false) {}
  bool missionId :1;
  bool platformTailNumber :1;
  bool platformHeadingAngle :1;
  bool platformPitchAngle :1;
  bool platformRollAngle :1;
  bool platformTrueAirspeed :1;
  bool platformIndicatedAirspeed :1;
  bool platformDesignation :1;
  bool imageSensorSource :1;
  bool imageCoordinateSystem :1;
  bool sensorLattitude :1;
  bool sensorLongitude :1;
  bool sensorTrueAltitude :1;
  bool sensorHorizontalFieldOfView :1;
  bool sensorVerticalFieldOfView :1;
  bool sensorRelativeAzimuthAngle :1;
  bool sensorRelativeElevationAngle :1;
  bool sensorRelativeRollAngle :1;
  bool slantRange :1;
  bool targetWidth :1;
  bool frameCenterLatitude :1;
  bool frameCenterLongitude :1;
  bool frameCenterElevation :1;
  bool offsetCornerLatitudePoint1 :1;
  bool offsetCornerLongitudePoint1 :1;
  bool offsetCornerLatitudePoint2 :1;
  bool offsetCornerLongitudePoint2 :1;
  bool offsetCornerLatitudePoint3 :1;
  bool offsetCornerLongitudePoint3 :1;
  bool offsetCornerLatitudePoint4 :1;
  bool offsetCornerLongitudePoint4 :1;
  bool icingDetected :1;
  bool windDirection :1;
  bool windSpeed :1;
  bool staticPressure :1;
  bool densityAltitude :1;
  bool outsideAirTemperature :1;
  bool targetLocationLatitude :1;
  bool targetLocationLongitude :1;
  bool targetLocationElevation :1;
  bool targetTrackGateWidth :1;
  bool targetTrackGateHeight :1;
  bool targetErrorEstimateCe90 :1;
  bool targetErrorEstimateLe90 :1;
  bool genericFlagData :1;
  bool securityLocalSet :1;
  bool differentialPressure :1;
  bool platformAngleOfAttack :1;
  bool platformVerticalSpeed :1;
  bool platformSideslipAngle :1;
  bool airfieldBarometricPressure :1;
  bool airfieldElevation :1;
  bool relativeHumidity :1;
  bool platformGroundSpeed :1;
  bool groundRange :1;
  bool platformFuelRemaining :1;
  bool platformCallSign :1;
  bool weaponLoad :1;
  bool weaponFired :1;
  bool laserPrfCode :1;
  bool sensorFieldOfViewName :1;
  bool platformMagneticHeading :1;
  bool invalid :1;
  bool alternatePlatformLatitude :1;
  bool alternatePlatformLongitude :1;
  bool alternatePlatformAltitude :1;
  bool alternatePlatformName :1;
  bool alternatePlatformHeading :1;
  bool eventStartTimeUtc :1;
  bool rvtLocalSet :1;
  bool vmtiLocalSet :1;
  bool sensorEllipsoidHeight :1;
  bool alternatePlatformEllipsoidHeight :1;
  bool operationalMode :1;
  bool frameCenterHeightAboveEllipsoid :1;
  bool sensorNorthVelocity :1;
  bool sensorEastVelocity :1;
  bool imageHorizonPixelPack :1;
  bool cornerLatitudePoint1_Full :1;
  bool cornerLongitudePoint1_Full :1;
  bool cornerLatitudePoint2_Full :1;
  bool cornerLongitudePoint2_Full :1;
  bool cornerLatitudePoint3_Full :1;
  bool cornerLongitudePoint3_Full :1;
  bool cornerLatitudePoint4_Full :1;
  bool cornerLongitudePoint4_Full :1;
  bool platformPitchAngleFull :1;
  bool platformRollAngleFull :1;
  bool platformAngleOfAttackFull :1;
  bool platformSideslipAngleFull :1;
  bool miisCoreIdentifier :1;
  bool sarMotionImageryLocalSet :1;
  bool targetWidthExtended :1;
  bool rangeImageLocalSet :1;
  bool geoRegistrationLocalSet :1;
  bool compositeImagingLocalSet :1;
  bool segmentLocalSet :1;
  bool amendLocalSet :1;
  bool sdccFlp :1;
  bool densityAltitudeExtended :1;
  bool sensorEllipsoidHeightExtended :1;
  bool alternatePlatformEllipsoidHeightExtended :1;
  bool streamDesignator :1;
  bool operationalBase :1;
  bool broadcastSource :1;
  bool rangeToRecoveryLocation :1;
  bool timeAirborne :1;
  bool propulsionUnitSpeed :1;
  bool platformCourseAngle :1;
  bool altitudeAgl :1;
  bool radarAltimeter :1;
  bool controlCommand :1;
  bool controlCommandVerificationList :1;
  bool sensorAzimuthRate :1;
  bool sensorElevationRate :1;
  bool sensorRollRate :1;
  bool onBoardMiStoragePercentFull :1;
  bool activeWavelengthList :1;
  bool countryCodes :1;
  bool numberOfNavsatsInView :1;
  bool positioningMethodSource :1;
  bool platformStatus :1;
  bool sensorControlMode :1;
  bool sensorFrameRatePack :1;
  bool wavelengthsList :1;
  bool targetId :1;
  bool airbaseLocations :1;
  bool takeOffTime :1;
  bool transmissionFrequency :1;
  bool onBoardMiStorageCapacity :1;
  bool zoomPercentage :1;
  bool communicationsMethod :1;
  bool leapSeconds :1;
  bool correctionOffset :1;
  bool payloadList :1;
  bool activePayloads :1;
  bool weaponStores :1;
  bool waypointList :1;
} _UasDataLinkLocalSet__isset;

class UasDataLinkLocalSet : public virtual ::apache::thrift::TBase {
 public:

  UasDataLinkLocalSet(const UasDataLinkLocalSet&);
  UasDataLinkLocalSet& operator=(const UasDataLinkLocalSet&);
  UasDataLinkLocalSet() : checksum(0), precisionTimeStamp(0), missionId(), platformTailNumber(), platformHeadingAngle(0), platformPitchAngle(0), platformRollAngle(0), platformTrueAirspeed(0), platformIndicatedAirspeed(0), platformDesignation(), imageSensorSource(), imageCoordinateSystem(), sensorLattitude(0), sensorLongitude(0), sensorTrueAltitude(0), sensorHorizontalFieldOfView(0), sensorVerticalFieldOfView(0), sensorRelativeAzimuthAngle(0), sensorRelativeElevationAngle(0), sensorRelativeRollAngle(0), slantRange(0), targetWidth(0), frameCenterLatitude(0), frameCenterLongitude(0), frameCenterElevation(0), offsetCornerLatitudePoint1(0), offsetCornerLongitudePoint1(0), offsetCornerLatitudePoint2(0), offsetCornerLongitudePoint2(0), offsetCornerLatitudePoint3(0), offsetCornerLongitudePoint3(0), offsetCornerLatitudePoint4(0), offsetCornerLongitudePoint4(0), icingDetected(0), windDirection(0), windSpeed(0), staticPressure(0), densityAltitude(0), outsideAirTemperature(0), targetLocationLatitude(0), targetLocationLongitude(0), targetLocationElevation(0), targetTrackGateWidth(0), targetTrackGateHeight(0), targetErrorEstimateCe90(0), targetErrorEstimateLe90(0), genericFlagData((GenericFlagData::type)0), differentialPressure(0), platformAngleOfAttack(0), platformVerticalSpeed(0), platformSideslipAngle(0), airfieldBarometricPressure(0), airfieldElevation(0), relativeHumidity(0), platformGroundSpeed(0), groundRange(0), platformFuelRemaining(0), platformCallSign(), weaponLoad(0), weaponFired(0), laserPrfCode(0), sensorFieldOfViewName((SensorFieldOfViewName::type)0), platformMagneticHeading(0), uasDatalinkLsVersionNumber(0), invalid(0), alternatePlatformLatitude(0), alternatePlatformLongitude(0), alternatePlatformAltitude(0), alternatePlatformName(), alternatePlatformHeading(0), eventStartTimeUtc(0), sensorEllipsoidHeight(0), alternatePlatformEllipsoidHeight(0), operationalMode((OperationalMode::type)0), frameCenterHeightAboveEllipsoid(0), sensorNorthVelocity(0), sensorEastVelocity(0), cornerLatitudePoint1_Full(0), cornerLongitudePoint1_Full(0), cornerLatitudePoint2_Full(0), cornerLongitudePoint2_Full(0), cornerLatitudePoint3_Full(0), cornerLongitudePoint3_Full(0), cornerLatitudePoint4_Full(0), cornerLongitudePoint4_Full(0), platformPitchAngleFull(0), platformRollAngleFull(0), platformAngleOfAttackFull(0), platformSideslipAngleFull(0), miisCoreIdentifier(), targetWidthExtended(0), densityAltitudeExtended(0), sensorEllipsoidHeightExtended(0), alternatePlatformEllipsoidHeightExtended(0), streamDesignator(), operationalBase(), broadcastSource(), rangeToRecoveryLocation(0), timeAirborne(0), propulsionUnitSpeed(0), platformCourseAngle(0), altitudeAgl(0), radarAltimeter(0), sensorAzimuthRate(0), sensorElevationRate(0), sensorRollRate(0), onBoardMiStoragePercentFull(0), numberOfNavsatsInView(0), positioningMethodSource(0), platformStatus((PlatformStatus::type)0), sensorControlMode((SensorControlMode::type)0), targetId(), takeOffTime(0), transmissionFrequency(0), onBoardMiStorageCapacity(0), zoomPercentage(0), communicationsMethod(), leapSeconds(0), correctionOffset(0), activePayloads() {
  }

  virtual ~UasDataLinkLocalSet() noexcept;
  int16_t checksum;
  int64_t precisionTimeStamp;
  std::string missionId;
  std::string platformTailNumber;
  double platformHeadingAngle;
  double platformPitchAngle;
  double platformRollAngle;
  int8_t platformTrueAirspeed;
  int8_t platformIndicatedAirspeed;
  std::string platformDesignation;
  std::string imageSensorSource;
  std::string imageCoordinateSystem;
  double sensorLattitude;
  double sensorLongitude;
  double sensorTrueAltitude;
  double sensorHorizontalFieldOfView;
  double sensorVerticalFieldOfView;
  double sensorRelativeAzimuthAngle;
  double sensorRelativeElevationAngle;
  double sensorRelativeRollAngle;
  double slantRange;
  double targetWidth;
  double frameCenterLatitude;
  double frameCenterLongitude;
  double frameCenterElevation;
  double offsetCornerLatitudePoint1;
  double offsetCornerLongitudePoint1;
  double offsetCornerLatitudePoint2;
  double offsetCornerLongitudePoint2;
  double offsetCornerLatitudePoint3;
  double offsetCornerLongitudePoint3;
  double offsetCornerLatitudePoint4;
  double offsetCornerLongitudePoint4;
  bool icingDetected;
  double windDirection;
  double windSpeed;
  double staticPressure;
  int16_t densityAltitude;
  int8_t outsideAirTemperature;
  double targetLocationLatitude;
  double targetLocationLongitude;
  double targetLocationElevation;
  int16_t targetTrackGateWidth;
  int16_t targetTrackGateHeight;
  double targetErrorEstimateCe90;
  double targetErrorEstimateLe90;
  /**
   * 
   * @see GenericFlagData
   */
  GenericFlagData::type genericFlagData;
  SecurityLocalSet securityLocalSet;
  double differentialPressure;
  double platformAngleOfAttack;
  double platformVerticalSpeed;
  double platformSideslipAngle;
  double airfieldBarometricPressure;
  double airfieldElevation;
  double relativeHumidity;
  int8_t platformGroundSpeed;
  double groundRange;
  int16_t platformFuelRemaining;
  std::string platformCallSign;
  int16_t weaponLoad;
  int8_t weaponFired;
  int16_t laserPrfCode;
  /**
   * 
   * @see SensorFieldOfViewName
   */
  SensorFieldOfViewName::type sensorFieldOfViewName;
  double platformMagneticHeading;
  int8_t uasDatalinkLsVersionNumber;
  int8_t invalid;
  double alternatePlatformLatitude;
  double alternatePlatformLongitude;
  double alternatePlatformAltitude;
  std::string alternatePlatformName;
  double alternatePlatformHeading;
  int64_t eventStartTimeUtc;
  RvtLocalSet rvtLocalSet;
  VmtiLocalSet vmtiLocalSet;
  double sensorEllipsoidHeight;
  double alternatePlatformEllipsoidHeight;
  /**
   * 
   * @see OperationalMode
   */
  OperationalMode::type operationalMode;
  double frameCenterHeightAboveEllipsoid;
  double sensorNorthVelocity;
  double sensorEastVelocity;
  ImageHorizontalPixelPack imageHorizonPixelPack;
  double cornerLatitudePoint1_Full;
  double cornerLongitudePoint1_Full;
  double cornerLatitudePoint2_Full;
  double cornerLongitudePoint2_Full;
  double cornerLatitudePoint3_Full;
  double cornerLongitudePoint3_Full;
  double cornerLatitudePoint4_Full;
  double cornerLongitudePoint4_Full;
  double platformPitchAngleFull;
  double platformRollAngleFull;
  double platformAngleOfAttackFull;
  double platformSideslipAngleFull;
  std::string miisCoreIdentifier;
  SarMotionImageryLocalSet sarMotionImageryLocalSet;
  double targetWidthExtended;
  RangeImageLocalSet rangeImageLocalSet;
  GeoRegistrationLocalSet geoRegistrationLocalSet;
  CompositeImagingLocalSet compositeImagingLocalSet;
  SegmentLocalSet segmentLocalSet;
  AmendLocalSet amendLocalSet;
  SdccFlp sdccFlp;
  double densityAltitudeExtended;
  double sensorEllipsoidHeightExtended;
  double alternatePlatformEllipsoidHeightExtended;
  std::string streamDesignator;
  std::string operationalBase;
  std::string broadcastSource;
  double rangeToRecoveryLocation;
  int32_t timeAirborne;
  int32_t propulsionUnitSpeed;
  double platformCourseAngle;
  double altitudeAgl;
  double radarAltimeter;
  ControlCommand controlCommand;
  ControlCommandVerificationList controlCommandVerificationList;
  double sensorAzimuthRate;
  double sensorElevationRate;
  double sensorRollRate;
  double onBoardMiStoragePercentFull;
  ActiveWavelengthList activeWavelengthList;
  CountryCodes countryCodes;
  int8_t numberOfNavsatsInView;
  int8_t positioningMethodSource;
  /**
   * 
   * @see PlatformStatus
   */
  PlatformStatus::type platformStatus;
  /**
   * 
   * @see SensorControlMode
   */
  SensorControlMode::type sensorControlMode;
  SensorFrameRatePack sensorFrameRatePack;
  WaveLengthList wavelengthsList;
  std::string targetId;
  AirbaseLocations airbaseLocations;
  int64_t takeOffTime;
  double transmissionFrequency;
  int32_t onBoardMiStorageCapacity;
  double zoomPercentage;
  std::string communicationsMethod;
  int32_t leapSeconds;
  int64_t correctionOffset;
  PayloadList payloadList;
  std::string activePayloads;
  WeaponStores weaponStores;
  WaypointList waypointList;

  _UasDataLinkLocalSet__isset __isset;

  void __set_checksum(const int16_t val);

  void __set_precisionTimeStamp(const int64_t val);

  void __set_missionId(const std::string& val);

  void __set_platformTailNumber(const std::string& val);

  void __set_platformHeadingAngle(const double val);

  void __set_platformPitchAngle(const double val);

  void __set_platformRollAngle(const double val);

  void __set_platformTrueAirspeed(const int8_t val);

  void __set_platformIndicatedAirspeed(const int8_t val);

  void __set_platformDesignation(const std::string& val);

  void __set_imageSensorSource(const std::string& val);

  void __set_imageCoordinateSystem(const std::string& val);

  void __set_sensorLattitude(const double val);

  void __set_sensorLongitude(const double val);

  void __set_sensorTrueAltitude(const double val);

  void __set_sensorHorizontalFieldOfView(const double val);

  void __set_sensorVerticalFieldOfView(const double val);

  void __set_sensorRelativeAzimuthAngle(const double val);

  void __set_sensorRelativeElevationAngle(const double val);

  void __set_sensorRelativeRollAngle(const double val);

  void __set_slantRange(const double val);

  void __set_targetWidth(const double val);

  void __set_frameCenterLatitude(const double val);

  void __set_frameCenterLongitude(const double val);

  void __set_frameCenterElevation(const double val);

  void __set_offsetCornerLatitudePoint1(const double val);

  void __set_offsetCornerLongitudePoint1(const double val);

  void __set_offsetCornerLatitudePoint2(const double val);

  void __set_offsetCornerLongitudePoint2(const double val);

  void __set_offsetCornerLatitudePoint3(const double val);

  void __set_offsetCornerLongitudePoint3(const double val);

  void __set_offsetCornerLatitudePoint4(const double val);

  void __set_offsetCornerLongitudePoint4(const double val);

  void __set_icingDetected(const bool val);

  void __set_windDirection(const double val);

  void __set_windSpeed(const double val);

  void __set_staticPressure(const double val);

  void __set_densityAltitude(const int16_t val);

  void __set_outsideAirTemperature(const int8_t val);

  void __set_targetLocationLatitude(const double val);

  void __set_targetLocationLongitude(const double val);

  void __set_targetLocationElevation(const double val);

  void __set_targetTrackGateWidth(const int16_t val);

  void __set_targetTrackGateHeight(const int16_t val);

  void __set_targetErrorEstimateCe90(const double val);

  void __set_targetErrorEstimateLe90(const double val);

  void __set_genericFlagData(const GenericFlagData::type val);

  void __set_securityLocalSet(const SecurityLocalSet& val);

  void __set_differentialPressure(const double val);

  void __set_platformAngleOfAttack(const double val);

  void __set_platformVerticalSpeed(const double val);

  void __set_platformSideslipAngle(const double val);

  void __set_airfieldBarometricPressure(const double val);

  void __set_airfieldElevation(const double val);

  void __set_relativeHumidity(const double val);

  void __set_platformGroundSpeed(const int8_t val);

  void __set_groundRange(const double val);

  void __set_platformFuelRemaining(const int16_t val);

  void __set_platformCallSign(const std::string& val);

  void __set_weaponLoad(const int16_t val);

  void __set_weaponFired(const int8_t val);

  void __set_laserPrfCode(const int16_t val);

  void __set_sensorFieldOfViewName(const SensorFieldOfViewName::type val);

  void __set_platformMagneticHeading(const double val);

  void __set_uasDatalinkLsVersionNumber(const int8_t val);

  void __set_invalid(const int8_t val);

  void __set_alternatePlatformLatitude(const double val);

  void __set_alternatePlatformLongitude(const double val);

  void __set_alternatePlatformAltitude(const double val);

  void __set_alternatePlatformName(const std::string& val);

  void __set_alternatePlatformHeading(const double val);

  void __set_eventStartTimeUtc(const int64_t val);

  void __set_rvtLocalSet(const RvtLocalSet& val);

  void __set_vmtiLocalSet(const VmtiLocalSet& val);

  void __set_sensorEllipsoidHeight(const double val);

  void __set_alternatePlatformEllipsoidHeight(const double val);

  void __set_operationalMode(const OperationalMode::type val);

  void __set_frameCenterHeightAboveEllipsoid(const double val);

  void __set_sensorNorthVelocity(const double val);

  void __set_sensorEastVelocity(const double val);

  void __set_imageHorizonPixelPack(const ImageHorizontalPixelPack& val);

  void __set_cornerLatitudePoint1_Full(const double val);

  void __set_cornerLongitudePoint1_Full(const double val);

  void __set_cornerLatitudePoint2_Full(const double val);

  void __set_cornerLongitudePoint2_Full(const double val);

  void __set_cornerLatitudePoint3_Full(const double val);

  void __set_cornerLongitudePoint3_Full(const double val);

  void __set_cornerLatitudePoint4_Full(const double val);

  void __set_cornerLongitudePoint4_Full(const double val);

  void __set_platformPitchAngleFull(const double val);

  void __set_platformRollAngleFull(const double val);

  void __set_platformAngleOfAttackFull(const double val);

  void __set_platformSideslipAngleFull(const double val);

  void __set_miisCoreIdentifier(const std::string& val);

  void __set_sarMotionImageryLocalSet(const SarMotionImageryLocalSet& val);

  void __set_targetWidthExtended(const double val);

  void __set_rangeImageLocalSet(const RangeImageLocalSet& val);

  void __set_geoRegistrationLocalSet(const GeoRegistrationLocalSet& val);

  void __set_compositeImagingLocalSet(const CompositeImagingLocalSet& val);

  void __set_segmentLocalSet(const SegmentLocalSet& val);

  void __set_amendLocalSet(const AmendLocalSet& val);

  void __set_sdccFlp(const SdccFlp& val);

  void __set_densityAltitudeExtended(const double val);

  void __set_sensorEllipsoidHeightExtended(const double val);

  void __set_alternatePlatformEllipsoidHeightExtended(const double val);

  void __set_streamDesignator(const std::string& val);

  void __set_operationalBase(const std::string& val);

  void __set_broadcastSource(const std::string& val);

  void __set_rangeToRecoveryLocation(const double val);

  void __set_timeAirborne(const int32_t val);

  void __set_propulsionUnitSpeed(const int32_t val);

  void __set_platformCourseAngle(const double val);

  void __set_altitudeAgl(const double val);

  void __set_radarAltimeter(const double val);

  void __set_controlCommand(const ControlCommand& val);

  void __set_controlCommandVerificationList(const ControlCommandVerificationList& val);

  void __set_sensorAzimuthRate(const double val);

  void __set_sensorElevationRate(const double val);

  void __set_sensorRollRate(const double val);

  void __set_onBoardMiStoragePercentFull(const double val);

  void __set_activeWavelengthList(const ActiveWavelengthList& val);

  void __set_countryCodes(const CountryCodes& val);

  void __set_numberOfNavsatsInView(const int8_t val);

  void __set_positioningMethodSource(const int8_t val);

  void __set_platformStatus(const PlatformStatus::type val);

  void __set_sensorControlMode(const SensorControlMode::type val);

  void __set_sensorFrameRatePack(const SensorFrameRatePack& val);

  void __set_wavelengthsList(const WaveLengthList& val);

  void __set_targetId(const std::string& val);

  void __set_airbaseLocations(const AirbaseLocations& val);

  void __set_takeOffTime(const int64_t val);

  void __set_transmissionFrequency(const double val);

  void __set_onBoardMiStorageCapacity(const int32_t val);

  void __set_zoomPercentage(const double val);

  void __set_communicationsMethod(const std::string& val);

  void __set_leapSeconds(const int32_t val);

  void __set_correctionOffset(const int64_t val);

  void __set_payloadList(const PayloadList& val);

  void __set_activePayloads(const std::string& val);

  void __set_weaponStores(const WeaponStores& val);

  void __set_waypointList(const WaypointList& val);

  bool operator == (const UasDataLinkLocalSet & rhs) const
  {
    if (!(checksum == rhs.checksum))
      return false;
    if (!(precisionTimeStamp == rhs.precisionTimeStamp))
      return false;
    if (__isset.missionId != rhs.__isset.missionId)
      return false;
    else if (__isset.missionId && !(missionId == rhs.missionId))
      return false;
    if (__isset.platformTailNumber != rhs.__isset.platformTailNumber)
      return false;
    else if (__isset.platformTailNumber && !(platformTailNumber == rhs.platformTailNumber))
      return false;
    if (__isset.platformHeadingAngle != rhs.__isset.platformHeadingAngle)
      return false;
    else if (__isset.platformHeadingAngle && !(platformHeadingAngle == rhs.platformHeadingAngle))
      return false;
    if (__isset.platformPitchAngle != rhs.__isset.platformPitchAngle)
      return false;
    else if (__isset.platformPitchAngle && !(platformPitchAngle == rhs.platformPitchAngle))
      return false;
    if (__isset.platformRollAngle != rhs.__isset.platformRollAngle)
      return false;
    else if (__isset.platformRollAngle && !(platformRollAngle == rhs.platformRollAngle))
      return false;
    if (__isset.platformTrueAirspeed != rhs.__isset.platformTrueAirspeed)
      return false;
    else if (__isset.platformTrueAirspeed && !(platformTrueAirspeed == rhs.platformTrueAirspeed))
      return false;
    if (__isset.platformIndicatedAirspeed != rhs.__isset.platformIndicatedAirspeed)
      return false;
    else if (__isset.platformIndicatedAirspeed && !(platformIndicatedAirspeed == rhs.platformIndicatedAirspeed))
      return false;
    if (__isset.platformDesignation != rhs.__isset.platformDesignation)
      return false;
    else if (__isset.platformDesignation && !(platformDesignation == rhs.platformDesignation))
      return false;
    if (__isset.imageSensorSource != rhs.__isset.imageSensorSource)
      return false;
    else if (__isset.imageSensorSource && !(imageSensorSource == rhs.imageSensorSource))
      return false;
    if (__isset.imageCoordinateSystem != rhs.__isset.imageCoordinateSystem)
      return false;
    else if (__isset.imageCoordinateSystem && !(imageCoordinateSystem == rhs.imageCoordinateSystem))
      return false;
    if (__isset.sensorLattitude != rhs.__isset.sensorLattitude)
      return false;
    else if (__isset.sensorLattitude && !(sensorLattitude == rhs.sensorLattitude))
      return false;
    if (__isset.sensorLongitude != rhs.__isset.sensorLongitude)
      return false;
    else if (__isset.sensorLongitude && !(sensorLongitude == rhs.sensorLongitude))
      return false;
    if (__isset.sensorTrueAltitude != rhs.__isset.sensorTrueAltitude)
      return false;
    else if (__isset.sensorTrueAltitude && !(sensorTrueAltitude == rhs.sensorTrueAltitude))
      return false;
    if (__isset.sensorHorizontalFieldOfView != rhs.__isset.sensorHorizontalFieldOfView)
      return false;
    else if (__isset.sensorHorizontalFieldOfView && !(sensorHorizontalFieldOfView == rhs.sensorHorizontalFieldOfView))
      return false;
    if (__isset.sensorVerticalFieldOfView != rhs.__isset.sensorVerticalFieldOfView)
      return false;
    else if (__isset.sensorVerticalFieldOfView && !(sensorVerticalFieldOfView == rhs.sensorVerticalFieldOfView))
      return false;
    if (__isset.sensorRelativeAzimuthAngle != rhs.__isset.sensorRelativeAzimuthAngle)
      return false;
    else if (__isset.sensorRelativeAzimuthAngle && !(sensorRelativeAzimuthAngle == rhs.sensorRelativeAzimuthAngle))
      return false;
    if (__isset.sensorRelativeElevationAngle != rhs.__isset.sensorRelativeElevationAngle)
      return false;
    else if (__isset.sensorRelativeElevationAngle && !(sensorRelativeElevationAngle == rhs.sensorRelativeElevationAngle))
      return false;
    if (__isset.sensorRelativeRollAngle != rhs.__isset.sensorRelativeRollAngle)
      return false;
    else if (__isset.sensorRelativeRollAngle && !(sensorRelativeRollAngle == rhs.sensorRelativeRollAngle))
      return false;
    if (__isset.slantRange != rhs.__isset.slantRange)
      return false;
    else if (__isset.slantRange && !(slantRange == rhs.slantRange))
      return false;
    if (__isset.targetWidth != rhs.__isset.targetWidth)
      return false;
    else if (__isset.targetWidth && !(targetWidth == rhs.targetWidth))
      return false;
    if (__isset.frameCenterLatitude != rhs.__isset.frameCenterLatitude)
      return false;
    else if (__isset.frameCenterLatitude && !(frameCenterLatitude == rhs.frameCenterLatitude))
      return false;
    if (__isset.frameCenterLongitude != rhs.__isset.frameCenterLongitude)
      return false;
    else if (__isset.frameCenterLongitude && !(frameCenterLongitude == rhs.frameCenterLongitude))
      return false;
    if (__isset.frameCenterElevation != rhs.__isset.frameCenterElevation)
      return false;
    else if (__isset.frameCenterElevation && !(frameCenterElevation == rhs.frameCenterElevation))
      return false;
    if (__isset.offsetCornerLatitudePoint1 != rhs.__isset.offsetCornerLatitudePoint1)
      return false;
    else if (__isset.offsetCornerLatitudePoint1 && !(offsetCornerLatitudePoint1 == rhs.offsetCornerLatitudePoint1))
      return false;
    if (__isset.offsetCornerLongitudePoint1 != rhs.__isset.offsetCornerLongitudePoint1)
      return false;
    else if (__isset.offsetCornerLongitudePoint1 && !(offsetCornerLongitudePoint1 == rhs.offsetCornerLongitudePoint1))
      return false;
    if (__isset.offsetCornerLatitudePoint2 != rhs.__isset.offsetCornerLatitudePoint2)
      return false;
    else if (__isset.offsetCornerLatitudePoint2 && !(offsetCornerLatitudePoint2 == rhs.offsetCornerLatitudePoint2))
      return false;
    if (__isset.offsetCornerLongitudePoint2 != rhs.__isset.offsetCornerLongitudePoint2)
      return false;
    else if (__isset.offsetCornerLongitudePoint2 && !(offsetCornerLongitudePoint2 == rhs.offsetCornerLongitudePoint2))
      return false;
    if (__isset.offsetCornerLatitudePoint3 != rhs.__isset.offsetCornerLatitudePoint3)
      return false;
    else if (__isset.offsetCornerLatitudePoint3 && !(offsetCornerLatitudePoint3 == rhs.offsetCornerLatitudePoint3))
      return false;
    if (__isset.offsetCornerLongitudePoint3 != rhs.__isset.offsetCornerLongitudePoint3)
      return false;
    else if (__isset.offsetCornerLongitudePoint3 && !(offsetCornerLongitudePoint3 == rhs.offsetCornerLongitudePoint3))
      return false;
    if (__isset.offsetCornerLatitudePoint4 != rhs.__isset.offsetCornerLatitudePoint4)
      return false;
    else if (__isset.offsetCornerLatitudePoint4 && !(offsetCornerLatitudePoint4 == rhs.offsetCornerLatitudePoint4))
      return false;
    if (__isset.offsetCornerLongitudePoint4 != rhs.__isset.offsetCornerLongitudePoint4)
      return false;
    else if (__isset.offsetCornerLongitudePoint4 && !(offsetCornerLongitudePoint4 == rhs.offsetCornerLongitudePoint4))
      return false;
    if (__isset.icingDetected != rhs.__isset.icingDetected)
      return false;
    else if (__isset.icingDetected && !(icingDetected == rhs.icingDetected))
      return false;
    if (__isset.windDirection != rhs.__isset.windDirection)
      return false;
    else if (__isset.windDirection && !(windDirection == rhs.windDirection))
      return false;
    if (__isset.windSpeed != rhs.__isset.windSpeed)
      return false;
    else if (__isset.windSpeed && !(windSpeed == rhs.windSpeed))
      return false;
    if (__isset.staticPressure != rhs.__isset.staticPressure)
      return false;
    else if (__isset.staticPressure && !(staticPressure == rhs.staticPressure))
      return false;
    if (__isset.densityAltitude != rhs.__isset.densityAltitude)
      return false;
    else if (__isset.densityAltitude && !(densityAltitude == rhs.densityAltitude))
      return false;
    if (__isset.outsideAirTemperature != rhs.__isset.outsideAirTemperature)
      return false;
    else if (__isset.outsideAirTemperature && !(outsideAirTemperature == rhs.outsideAirTemperature))
      return false;
    if (__isset.targetLocationLatitude != rhs.__isset.targetLocationLatitude)
      return false;
    else if (__isset.targetLocationLatitude && !(targetLocationLatitude == rhs.targetLocationLatitude))
      return false;
    if (__isset.targetLocationLongitude != rhs.__isset.targetLocationLongitude)
      return false;
    else if (__isset.targetLocationLongitude && !(targetLocationLongitude == rhs.targetLocationLongitude))
      return false;
    if (__isset.targetLocationElevation != rhs.__isset.targetLocationElevation)
      return false;
    else if (__isset.targetLocationElevation && !(targetLocationElevation == rhs.targetLocationElevation))
      return false;
    if (__isset.targetTrackGateWidth != rhs.__isset.targetTrackGateWidth)
      return false;
    else if (__isset.targetTrackGateWidth && !(targetTrackGateWidth == rhs.targetTrackGateWidth))
      return false;
    if (__isset.targetTrackGateHeight != rhs.__isset.targetTrackGateHeight)
      return false;
    else if (__isset.targetTrackGateHeight && !(targetTrackGateHeight == rhs.targetTrackGateHeight))
      return false;
    if (__isset.targetErrorEstimateCe90 != rhs.__isset.targetErrorEstimateCe90)
      return false;
    else if (__isset.targetErrorEstimateCe90 && !(targetErrorEstimateCe90 == rhs.targetErrorEstimateCe90))
      return false;
    if (__isset.targetErrorEstimateLe90 != rhs.__isset.targetErrorEstimateLe90)
      return false;
    else if (__isset.targetErrorEstimateLe90 && !(targetErrorEstimateLe90 == rhs.targetErrorEstimateLe90))
      return false;
    if (__isset.genericFlagData != rhs.__isset.genericFlagData)
      return false;
    else if (__isset.genericFlagData && !(genericFlagData == rhs.genericFlagData))
      return false;
    if (__isset.securityLocalSet != rhs.__isset.securityLocalSet)
      return false;
    else if (__isset.securityLocalSet && !(securityLocalSet == rhs.securityLocalSet))
      return false;
    if (__isset.differentialPressure != rhs.__isset.differentialPressure)
      return false;
    else if (__isset.differentialPressure && !(differentialPressure == rhs.differentialPressure))
      return false;
    if (__isset.platformAngleOfAttack != rhs.__isset.platformAngleOfAttack)
      return false;
    else if (__isset.platformAngleOfAttack && !(platformAngleOfAttack == rhs.platformAngleOfAttack))
      return false;
    if (__isset.platformVerticalSpeed != rhs.__isset.platformVerticalSpeed)
      return false;
    else if (__isset.platformVerticalSpeed && !(platformVerticalSpeed == rhs.platformVerticalSpeed))
      return false;
    if (__isset.platformSideslipAngle != rhs.__isset.platformSideslipAngle)
      return false;
    else if (__isset.platformSideslipAngle && !(platformSideslipAngle == rhs.platformSideslipAngle))
      return false;
    if (__isset.airfieldBarometricPressure != rhs.__isset.airfieldBarometricPressure)
      return false;
    else if (__isset.airfieldBarometricPressure && !(airfieldBarometricPressure == rhs.airfieldBarometricPressure))
      return false;
    if (__isset.airfieldElevation != rhs.__isset.airfieldElevation)
      return false;
    else if (__isset.airfieldElevation && !(airfieldElevation == rhs.airfieldElevation))
      return false;
    if (__isset.relativeHumidity != rhs.__isset.relativeHumidity)
      return false;
    else if (__isset.relativeHumidity && !(relativeHumidity == rhs.relativeHumidity))
      return false;
    if (__isset.platformGroundSpeed != rhs.__isset.platformGroundSpeed)
      return false;
    else if (__isset.platformGroundSpeed && !(platformGroundSpeed == rhs.platformGroundSpeed))
      return false;
    if (__isset.groundRange != rhs.__isset.groundRange)
      return false;
    else if (__isset.groundRange && !(groundRange == rhs.groundRange))
      return false;
    if (__isset.platformFuelRemaining != rhs.__isset.platformFuelRemaining)
      return false;
    else if (__isset.platformFuelRemaining && !(platformFuelRemaining == rhs.platformFuelRemaining))
      return false;
    if (__isset.platformCallSign != rhs.__isset.platformCallSign)
      return false;
    else if (__isset.platformCallSign && !(platformCallSign == rhs.platformCallSign))
      return false;
    if (__isset.weaponLoad != rhs.__isset.weaponLoad)
      return false;
    else if (__isset.weaponLoad && !(weaponLoad == rhs.weaponLoad))
      return false;
    if (__isset.weaponFired != rhs.__isset.weaponFired)
      return false;
    else if (__isset.weaponFired && !(weaponFired == rhs.weaponFired))
      return false;
    if (__isset.laserPrfCode != rhs.__isset.laserPrfCode)
      return false;
    else if (__isset.laserPrfCode && !(laserPrfCode == rhs.laserPrfCode))
      return false;
    if (__isset.sensorFieldOfViewName != rhs.__isset.sensorFieldOfViewName)
      return false;
    else if (__isset.sensorFieldOfViewName && !(sensorFieldOfViewName == rhs.sensorFieldOfViewName))
      return false;
    if (__isset.platformMagneticHeading != rhs.__isset.platformMagneticHeading)
      return false;
    else if (__isset.platformMagneticHeading && !(platformMagneticHeading == rhs.platformMagneticHeading))
      return false;
    if (!(uasDatalinkLsVersionNumber == rhs.uasDatalinkLsVersionNumber))
      return false;
    if (__isset.invalid != rhs.__isset.invalid)
      return false;
    else if (__isset.invalid && !(invalid == rhs.invalid))
      return false;
    if (__isset.alternatePlatformLatitude != rhs.__isset.alternatePlatformLatitude)
      return false;
    else if (__isset.alternatePlatformLatitude && !(alternatePlatformLatitude == rhs.alternatePlatformLatitude))
      return false;
    if (__isset.alternatePlatformLongitude != rhs.__isset.alternatePlatformLongitude)
      return false;
    else if (__isset.alternatePlatformLongitude && !(alternatePlatformLongitude == rhs.alternatePlatformLongitude))
      return false;
    if (__isset.alternatePlatformAltitude != rhs.__isset.alternatePlatformAltitude)
      return false;
    else if (__isset.alternatePlatformAltitude && !(alternatePlatformAltitude == rhs.alternatePlatformAltitude))
      return false;
    if (__isset.alternatePlatformName != rhs.__isset.alternatePlatformName)
      return false;
    else if (__isset.alternatePlatformName && !(alternatePlatformName == rhs.alternatePlatformName))
      return false;
    if (__isset.alternatePlatformHeading != rhs.__isset.alternatePlatformHeading)
      return false;
    else if (__isset.alternatePlatformHeading && !(alternatePlatformHeading == rhs.alternatePlatformHeading))
      return false;
    if (__isset.eventStartTimeUtc != rhs.__isset.eventStartTimeUtc)
      return false;
    else if (__isset.eventStartTimeUtc && !(eventStartTimeUtc == rhs.eventStartTimeUtc))
      return false;
    if (__isset.rvtLocalSet != rhs.__isset.rvtLocalSet)
      return false;
    else if (__isset.rvtLocalSet && !(rvtLocalSet == rhs.rvtLocalSet))
      return false;
    if (__isset.vmtiLocalSet != rhs.__isset.vmtiLocalSet)
      return false;
    else if (__isset.vmtiLocalSet && !(vmtiLocalSet == rhs.vmtiLocalSet))
      return false;
    if (__isset.sensorEllipsoidHeight != rhs.__isset.sensorEllipsoidHeight)
      return false;
    else if (__isset.sensorEllipsoidHeight && !(sensorEllipsoidHeight == rhs.sensorEllipsoidHeight))
      return false;
    if (__isset.alternatePlatformEllipsoidHeight != rhs.__isset.alternatePlatformEllipsoidHeight)
      return false;
    else if (__isset.alternatePlatformEllipsoidHeight && !(alternatePlatformEllipsoidHeight == rhs.alternatePlatformEllipsoidHeight))
      return false;
    if (__isset.operationalMode != rhs.__isset.operationalMode)
      return false;
    else if (__isset.operationalMode && !(operationalMode == rhs.operationalMode))
      return false;
    if (__isset.frameCenterHeightAboveEllipsoid != rhs.__isset.frameCenterHeightAboveEllipsoid)
      return false;
    else if (__isset.frameCenterHeightAboveEllipsoid && !(frameCenterHeightAboveEllipsoid == rhs.frameCenterHeightAboveEllipsoid))
      return false;
    if (__isset.sensorNorthVelocity != rhs.__isset.sensorNorthVelocity)
      return false;
    else if (__isset.sensorNorthVelocity && !(sensorNorthVelocity == rhs.sensorNorthVelocity))
      return false;
    if (__isset.sensorEastVelocity != rhs.__isset.sensorEastVelocity)
      return false;
    else if (__isset.sensorEastVelocity && !(sensorEastVelocity == rhs.sensorEastVelocity))
      return false;
    if (__isset.imageHorizonPixelPack != rhs.__isset.imageHorizonPixelPack)
      return false;
    else if (__isset.imageHorizonPixelPack && !(imageHorizonPixelPack == rhs.imageHorizonPixelPack))
      return false;
    if (__isset.cornerLatitudePoint1_Full != rhs.__isset.cornerLatitudePoint1_Full)
      return false;
    else if (__isset.cornerLatitudePoint1_Full && !(cornerLatitudePoint1_Full == rhs.cornerLatitudePoint1_Full))
      return false;
    if (__isset.cornerLongitudePoint1_Full != rhs.__isset.cornerLongitudePoint1_Full)
      return false;
    else if (__isset.cornerLongitudePoint1_Full && !(cornerLongitudePoint1_Full == rhs.cornerLongitudePoint1_Full))
      return false;
    if (__isset.cornerLatitudePoint2_Full != rhs.__isset.cornerLatitudePoint2_Full)
      return false;
    else if (__isset.cornerLatitudePoint2_Full && !(cornerLatitudePoint2_Full == rhs.cornerLatitudePoint2_Full))
      return false;
    if (__isset.cornerLongitudePoint2_Full != rhs.__isset.cornerLongitudePoint2_Full)
      return false;
    else if (__isset.cornerLongitudePoint2_Full && !(cornerLongitudePoint2_Full == rhs.cornerLongitudePoint2_Full))
      return false;
    if (__isset.cornerLatitudePoint3_Full != rhs.__isset.cornerLatitudePoint3_Full)
      return false;
    else if (__isset.cornerLatitudePoint3_Full && !(cornerLatitudePoint3_Full == rhs.cornerLatitudePoint3_Full))
      return false;
    if (__isset.cornerLongitudePoint3_Full != rhs.__isset.cornerLongitudePoint3_Full)
      return false;
    else if (__isset.cornerLongitudePoint3_Full && !(cornerLongitudePoint3_Full == rhs.cornerLongitudePoint3_Full))
      return false;
    if (__isset.cornerLatitudePoint4_Full != rhs.__isset.cornerLatitudePoint4_Full)
      return false;
    else if (__isset.cornerLatitudePoint4_Full && !(cornerLatitudePoint4_Full == rhs.cornerLatitudePoint4_Full))
      return false;
    if (__isset.cornerLongitudePoint4_Full != rhs.__isset.cornerLongitudePoint4_Full)
      return false;
    else if (__isset.cornerLongitudePoint4_Full && !(cornerLongitudePoint4_Full == rhs.cornerLongitudePoint4_Full))
      return false;
    if (__isset.platformPitchAngleFull != rhs.__isset.platformPitchAngleFull)
      return false;
    else if (__isset.platformPitchAngleFull && !(platformPitchAngleFull == rhs.platformPitchAngleFull))
      return false;
    if (__isset.platformRollAngleFull != rhs.__isset.platformRollAngleFull)
      return false;
    else if (__isset.platformRollAngleFull && !(platformRollAngleFull == rhs.platformRollAngleFull))
      return false;
    if (__isset.platformAngleOfAttackFull != rhs.__isset.platformAngleOfAttackFull)
      return false;
    else if (__isset.platformAngleOfAttackFull && !(platformAngleOfAttackFull == rhs.platformAngleOfAttackFull))
      return false;
    if (__isset.platformSideslipAngleFull != rhs.__isset.platformSideslipAngleFull)
      return false;
    else if (__isset.platformSideslipAngleFull && !(platformSideslipAngleFull == rhs.platformSideslipAngleFull))
      return false;
    if (__isset.miisCoreIdentifier != rhs.__isset.miisCoreIdentifier)
      return false;
    else if (__isset.miisCoreIdentifier && !(miisCoreIdentifier == rhs.miisCoreIdentifier))
      return false;
    if (__isset.sarMotionImageryLocalSet != rhs.__isset.sarMotionImageryLocalSet)
      return false;
    else if (__isset.sarMotionImageryLocalSet && !(sarMotionImageryLocalSet == rhs.sarMotionImageryLocalSet))
      return false;
    if (__isset.targetWidthExtended != rhs.__isset.targetWidthExtended)
      return false;
    else if (__isset.targetWidthExtended && !(targetWidthExtended == rhs.targetWidthExtended))
      return false;
    if (__isset.rangeImageLocalSet != rhs.__isset.rangeImageLocalSet)
      return false;
    else if (__isset.rangeImageLocalSet && !(rangeImageLocalSet == rhs.rangeImageLocalSet))
      return false;
    if (__isset.geoRegistrationLocalSet != rhs.__isset.geoRegistrationLocalSet)
      return false;
    else if (__isset.geoRegistrationLocalSet && !(geoRegistrationLocalSet == rhs.geoRegistrationLocalSet))
      return false;
    if (__isset.compositeImagingLocalSet != rhs.__isset.compositeImagingLocalSet)
      return false;
    else if (__isset.compositeImagingLocalSet && !(compositeImagingLocalSet == rhs.compositeImagingLocalSet))
      return false;
    if (__isset.segmentLocalSet != rhs.__isset.segmentLocalSet)
      return false;
    else if (__isset.segmentLocalSet && !(segmentLocalSet == rhs.segmentLocalSet))
      return false;
    if (__isset.amendLocalSet != rhs.__isset.amendLocalSet)
      return false;
    else if (__isset.amendLocalSet && !(amendLocalSet == rhs.amendLocalSet))
      return false;
    if (__isset.sdccFlp != rhs.__isset.sdccFlp)
      return false;
    else if (__isset.sdccFlp && !(sdccFlp == rhs.sdccFlp))
      return false;
    if (__isset.densityAltitudeExtended != rhs.__isset.densityAltitudeExtended)
      return false;
    else if (__isset.densityAltitudeExtended && !(densityAltitudeExtended == rhs.densityAltitudeExtended))
      return false;
    if (__isset.sensorEllipsoidHeightExtended != rhs.__isset.sensorEllipsoidHeightExtended)
      return false;
    else if (__isset.sensorEllipsoidHeightExtended && !(sensorEllipsoidHeightExtended == rhs.sensorEllipsoidHeightExtended))
      return false;
    if (__isset.alternatePlatformEllipsoidHeightExtended != rhs.__isset.alternatePlatformEllipsoidHeightExtended)
      return false;
    else if (__isset.alternatePlatformEllipsoidHeightExtended && !(alternatePlatformEllipsoidHeightExtended == rhs.alternatePlatformEllipsoidHeightExtended))
      return false;
    if (__isset.streamDesignator != rhs.__isset.streamDesignator)
      return false;
    else if (__isset.streamDesignator && !(streamDesignator == rhs.streamDesignator))
      return false;
    if (__isset.operationalBase != rhs.__isset.operationalBase)
      return false;
    else if (__isset.operationalBase && !(operationalBase == rhs.operationalBase))
      return false;
    if (__isset.broadcastSource != rhs.__isset.broadcastSource)
      return false;
    else if (__isset.broadcastSource && !(broadcastSource == rhs.broadcastSource))
      return false;
    if (__isset.rangeToRecoveryLocation != rhs.__isset.rangeToRecoveryLocation)
      return false;
    else if (__isset.rangeToRecoveryLocation && !(rangeToRecoveryLocation == rhs.rangeToRecoveryLocation))
      return false;
    if (__isset.timeAirborne != rhs.__isset.timeAirborne)
      return false;
    else if (__isset.timeAirborne && !(timeAirborne == rhs.timeAirborne))
      return false;
    if (__isset.propulsionUnitSpeed != rhs.__isset.propulsionUnitSpeed)
      return false;
    else if (__isset.propulsionUnitSpeed && !(propulsionUnitSpeed == rhs.propulsionUnitSpeed))
      return false;
    if (__isset.platformCourseAngle != rhs.__isset.platformCourseAngle)
      return false;
    else if (__isset.platformCourseAngle && !(platformCourseAngle == rhs.platformCourseAngle))
      return false;
    if (__isset.altitudeAgl != rhs.__isset.altitudeAgl)
      return false;
    else if (__isset.altitudeAgl && !(altitudeAgl == rhs.altitudeAgl))
      return false;
    if (__isset.radarAltimeter != rhs.__isset.radarAltimeter)
      return false;
    else if (__isset.radarAltimeter && !(radarAltimeter == rhs.radarAltimeter))
      return false;
    if (__isset.controlCommand != rhs.__isset.controlCommand)
      return false;
    else if (__isset.controlCommand && !(controlCommand == rhs.controlCommand))
      return false;
    if (__isset.controlCommandVerificationList != rhs.__isset.controlCommandVerificationList)
      return false;
    else if (__isset.controlCommandVerificationList && !(controlCommandVerificationList == rhs.controlCommandVerificationList))
      return false;
    if (__isset.sensorAzimuthRate != rhs.__isset.sensorAzimuthRate)
      return false;
    else if (__isset.sensorAzimuthRate && !(sensorAzimuthRate == rhs.sensorAzimuthRate))
      return false;
    if (__isset.sensorElevationRate != rhs.__isset.sensorElevationRate)
      return false;
    else if (__isset.sensorElevationRate && !(sensorElevationRate == rhs.sensorElevationRate))
      return false;
    if (__isset.sensorRollRate != rhs.__isset.sensorRollRate)
      return false;
    else if (__isset.sensorRollRate && !(sensorRollRate == rhs.sensorRollRate))
      return false;
    if (__isset.onBoardMiStoragePercentFull != rhs.__isset.onBoardMiStoragePercentFull)
      return false;
    else if (__isset.onBoardMiStoragePercentFull && !(onBoardMiStoragePercentFull == rhs.onBoardMiStoragePercentFull))
      return false;
    if (__isset.activeWavelengthList != rhs.__isset.activeWavelengthList)
      return false;
    else if (__isset.activeWavelengthList && !(activeWavelengthList == rhs.activeWavelengthList))
      return false;
    if (__isset.countryCodes != rhs.__isset.countryCodes)
      return false;
    else if (__isset.countryCodes && !(countryCodes == rhs.countryCodes))
      return false;
    if (__isset.numberOfNavsatsInView != rhs.__isset.numberOfNavsatsInView)
      return false;
    else if (__isset.numberOfNavsatsInView && !(numberOfNavsatsInView == rhs.numberOfNavsatsInView))
      return false;
    if (__isset.positioningMethodSource != rhs.__isset.positioningMethodSource)
      return false;
    else if (__isset.positioningMethodSource && !(positioningMethodSource == rhs.positioningMethodSource))
      return false;
    if (__isset.platformStatus != rhs.__isset.platformStatus)
      return false;
    else if (__isset.platformStatus && !(platformStatus == rhs.platformStatus))
      return false;
    if (__isset.sensorControlMode != rhs.__isset.sensorControlMode)
      return false;
    else if (__isset.sensorControlMode && !(sensorControlMode == rhs.sensorControlMode))
      return false;
    if (__isset.sensorFrameRatePack != rhs.__isset.sensorFrameRatePack)
      return false;
    else if (__isset.sensorFrameRatePack && !(sensorFrameRatePack == rhs.sensorFrameRatePack))
      return false;
    if (__isset.wavelengthsList != rhs.__isset.wavelengthsList)
      return false;
    else if (__isset.wavelengthsList && !(wavelengthsList == rhs.wavelengthsList))
      return false;
    if (__isset.targetId != rhs.__isset.targetId)
      return false;
    else if (__isset.targetId && !(targetId == rhs.targetId))
      return false;
    if (__isset.airbaseLocations != rhs.__isset.airbaseLocations)
      return false;
    else if (__isset.airbaseLocations && !(airbaseLocations == rhs.airbaseLocations))
      return false;
    if (__isset.takeOffTime != rhs.__isset.takeOffTime)
      return false;
    else if (__isset.takeOffTime && !(takeOffTime == rhs.takeOffTime))
      return false;
    if (__isset.transmissionFrequency != rhs.__isset.transmissionFrequency)
      return false;
    else if (__isset.transmissionFrequency && !(transmissionFrequency == rhs.transmissionFrequency))
      return false;
    if (__isset.onBoardMiStorageCapacity != rhs.__isset.onBoardMiStorageCapacity)
      return false;
    else if (__isset.onBoardMiStorageCapacity && !(onBoardMiStorageCapacity == rhs.onBoardMiStorageCapacity))
      return false;
    if (__isset.zoomPercentage != rhs.__isset.zoomPercentage)
      return false;
    else if (__isset.zoomPercentage && !(zoomPercentage == rhs.zoomPercentage))
      return false;
    if (__isset.communicationsMethod != rhs.__isset.communicationsMethod)
      return false;
    else if (__isset.communicationsMethod && !(communicationsMethod == rhs.communicationsMethod))
      return false;
    if (__isset.leapSeconds != rhs.__isset.leapSeconds)
      return false;
    else if (__isset.leapSeconds && !(leapSeconds == rhs.leapSeconds))
      return false;
    if (__isset.correctionOffset != rhs.__isset.correctionOffset)
      return false;
    else if (__isset.correctionOffset && !(correctionOffset == rhs.correctionOffset))
      return false;
    if (__isset.payloadList != rhs.__isset.payloadList)
      return false;
    else if (__isset.payloadList && !(payloadList == rhs.payloadList))
      return false;
    if (__isset.activePayloads != rhs.__isset.activePayloads)
      return false;
    else if (__isset.activePayloads && !(activePayloads == rhs.activePayloads))
      return false;
    if (__isset.weaponStores != rhs.__isset.weaponStores)
      return false;
    else if (__isset.weaponStores && !(weaponStores == rhs.weaponStores))
      return false;
    if (__isset.waypointList != rhs.__isset.waypointList)
      return false;
    else if (__isset.waypointList && !(waypointList == rhs.waypointList))
      return false;
    return true;
  }
  bool operator != (const UasDataLinkLocalSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UasDataLinkLocalSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UasDataLinkLocalSet &a, UasDataLinkLocalSet &b);

std::ostream& operator<<(std::ostream& out, const UasDataLinkLocalSet& obj);

}} // namespace

#endif
