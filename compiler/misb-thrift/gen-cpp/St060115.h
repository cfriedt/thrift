/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef St060115_H
#define St060115_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "st060115_types.h"

namespace org { namespace misb {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class St060115If {
 public:
  virtual ~St060115If() {}
  virtual void update(const UasDataLinkLocalSet& message) = 0;
};

class St060115IfFactory {
 public:
  typedef St060115If Handler;

  virtual ~St060115IfFactory() {}

  virtual St060115If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(St060115If* /* handler */) = 0;
};

class St060115IfSingletonFactory : virtual public St060115IfFactory {
 public:
  St060115IfSingletonFactory(const ::std::shared_ptr<St060115If>& iface) : iface_(iface) {}
  virtual ~St060115IfSingletonFactory() {}

  virtual St060115If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(St060115If* /* handler */) {}

 protected:
  ::std::shared_ptr<St060115If> iface_;
};

class St060115Null : virtual public St060115If {
 public:
  virtual ~St060115Null() {}
  void update(const UasDataLinkLocalSet& /* message */) {
    return;
  }
};

typedef struct _St060115_update_args__isset {
  _St060115_update_args__isset() : message(false) {}
  bool message :1;
} _St060115_update_args__isset;

class St060115_update_args {
 public:

  St060115_update_args(const St060115_update_args&);
  St060115_update_args& operator=(const St060115_update_args&);
  St060115_update_args() {
  }

  virtual ~St060115_update_args() noexcept;
  UasDataLinkLocalSet message;

  _St060115_update_args__isset __isset;

  void __set_message(const UasDataLinkLocalSet& val);

  bool operator == (const St060115_update_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const St060115_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const St060115_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class St060115_update_pargs {
 public:


  virtual ~St060115_update_pargs() noexcept;
  const UasDataLinkLocalSet* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class St060115Client : virtual public St060115If {
 public:
  St060115Client(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  St060115Client(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void update(const UasDataLinkLocalSet& message);
  void send_update(const UasDataLinkLocalSet& message);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class St060115Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<St060115If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (St060115Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  St060115Processor(::std::shared_ptr<St060115If> iface) :
    iface_(iface) {
    processMap_["update"] = &St060115Processor::process_update;
  }

  virtual ~St060115Processor() {}
};

class St060115ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  St060115ProcessorFactory(const ::std::shared_ptr< St060115IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< St060115IfFactory > handlerFactory_;
};

class St060115Multiface : virtual public St060115If {
 public:
  St060115Multiface(std::vector<std::shared_ptr<St060115If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~St060115Multiface() {}
 protected:
  std::vector<std::shared_ptr<St060115If> > ifaces_;
  St060115Multiface() {}
  void add(::std::shared_ptr<St060115If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void update(const UasDataLinkLocalSet& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(message);
    }
    ifaces_[i]->update(message);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class St060115ConcurrentClient : virtual public St060115If {
 public:
  St060115ConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  St060115ConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void update(const UasDataLinkLocalSet& message);
  void send_update(const UasDataLinkLocalSet& message);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
